syntax = "proto3";

package node_service.v1;

option go_package = "github.com/smartcontractkit/chainlink-protos/storage-service/go;storage_service";

// NodeService defines the download-related storage service interface that is used by nodes.
// Workflow nodes will directly connect via gRPC to the storage service to download artifacts.
service NodeService {
  // DownloadArtifact streams a file from the storage service in chunks.
  rpc DownloadArtifact(DownloadArtifactRequest) returns (stream DownloadArtifactChunk);
}

message DownloadArtifactRequest {
  string id = 1; // ID of the artifact to download
  ArtifactType type = 2; // Type of the artifact to download
  EnvironmentName environment = 3; // Environment of the artifact to download
  int32 chunk_size = 4; // Optional: chunk size in bytes (default 1MB if not set)
}

message DownloadArtifactChunk {
  WorkflowArtifact artifact = 1; // Only sent in the first chunk
  bytes content_chunk = 2; // The chunk of file content
  int64 offset = 3; // Offset of this chunk in the file
  bool last_chunk = 4; // True if this is the last chunk
}

enum ArtifactType {
  ARTIFACT_TYPE_UNSPECIFIED = 0; // Unspecified artifact type
  ARTIFACT_TYPE_BINARY = 1; // Workflow binary artifact
  ARTIFACT_TYPE_CONFIG = 2; // Workflow configuration artifact
}

// environment indicates which Workflow Registry to use
enum EnvironmentName {
  ENVIRONMENT_NAME_UNSPECIFIED = 0; // Unspecified environment
  PRODUCTION_MAINNET = 1;
  PRODUCTION_TESTNET = 2;
}

message WorkflowArtifact {
  string id = 1; // Unique workflow ID for the artifact
  ArtifactType type = 2; // Type of the artifact
  EnvironmentName environment = 3; // Environment where the artifact is stored
}
