// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: job-distributor/v1/probation/probation.proto

package probation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RollbackPolicyService_GetRollbackPolicy_FullMethodName    = "/api.probation.v1.RollbackPolicyService/GetRollbackPolicy"
	RollbackPolicyService_CreateRollbackPolicy_FullMethodName = "/api.probation.v1.RollbackPolicyService/CreateRollbackPolicy"
	RollbackPolicyService_ListRollbackPolicies_FullMethodName = "/api.probation.v1.RollbackPolicyService/ListRollbackPolicies"
	RollbackPolicyService_UpdateRollbackPolicy_FullMethodName = "/api.probation.v1.RollbackPolicyService/UpdateRollbackPolicy"
)

// RollbackPolicyServiceClient is the client API for RollbackPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RollbackPolicyService provides RPCs for managing rollback policies.
type RollbackPolicyServiceClient interface {
	// GetRollbackPolicy retrieves the details of a specific rollback policy by its ID.
	GetRollbackPolicy(ctx context.Context, in *GetRollbackPolicyRequest, opts ...grpc.CallOption) (*GetRollbackPolicyResponse, error)
	// CreateRollbackPolicy creates a new rollback policy.
	CreateRollbackPolicy(ctx context.Context, in *CreateRollbackPolicyRequest, opts ...grpc.CallOption) (*CreateRollbackPolicyResponse, error)
	// ListRollbackPolicies returns a list of rollback policies.
	ListRollbackPolicies(ctx context.Context, in *ListRollbackPoliciesRequest, opts ...grpc.CallOption) (*ListRollbackPoliciesResponse, error)
	// UpdateRollbackPolicy updates an existing rollback policy.
	UpdateRollbackPolicy(ctx context.Context, in *UpdateRollbackPolicyRequest, opts ...grpc.CallOption) (*UpdateRollbackPolicyResponse, error)
}

type rollbackPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRollbackPolicyServiceClient(cc grpc.ClientConnInterface) RollbackPolicyServiceClient {
	return &rollbackPolicyServiceClient{cc}
}

func (c *rollbackPolicyServiceClient) GetRollbackPolicy(ctx context.Context, in *GetRollbackPolicyRequest, opts ...grpc.CallOption) (*GetRollbackPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRollbackPolicyResponse)
	err := c.cc.Invoke(ctx, RollbackPolicyService_GetRollbackPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rollbackPolicyServiceClient) CreateRollbackPolicy(ctx context.Context, in *CreateRollbackPolicyRequest, opts ...grpc.CallOption) (*CreateRollbackPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRollbackPolicyResponse)
	err := c.cc.Invoke(ctx, RollbackPolicyService_CreateRollbackPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rollbackPolicyServiceClient) ListRollbackPolicies(ctx context.Context, in *ListRollbackPoliciesRequest, opts ...grpc.CallOption) (*ListRollbackPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRollbackPoliciesResponse)
	err := c.cc.Invoke(ctx, RollbackPolicyService_ListRollbackPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rollbackPolicyServiceClient) UpdateRollbackPolicy(ctx context.Context, in *UpdateRollbackPolicyRequest, opts ...grpc.CallOption) (*UpdateRollbackPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRollbackPolicyResponse)
	err := c.cc.Invoke(ctx, RollbackPolicyService_UpdateRollbackPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RollbackPolicyServiceServer is the server API for RollbackPolicyService service.
// All implementations must embed UnimplementedRollbackPolicyServiceServer
// for forward compatibility.
//
// RollbackPolicyService provides RPCs for managing rollback policies.
type RollbackPolicyServiceServer interface {
	// GetRollbackPolicy retrieves the details of a specific rollback policy by its ID.
	GetRollbackPolicy(context.Context, *GetRollbackPolicyRequest) (*GetRollbackPolicyResponse, error)
	// CreateRollbackPolicy creates a new rollback policy.
	CreateRollbackPolicy(context.Context, *CreateRollbackPolicyRequest) (*CreateRollbackPolicyResponse, error)
	// ListRollbackPolicies returns a list of rollback policies.
	ListRollbackPolicies(context.Context, *ListRollbackPoliciesRequest) (*ListRollbackPoliciesResponse, error)
	// UpdateRollbackPolicy updates an existing rollback policy.
	UpdateRollbackPolicy(context.Context, *UpdateRollbackPolicyRequest) (*UpdateRollbackPolicyResponse, error)
	mustEmbedUnimplementedRollbackPolicyServiceServer()
}

// UnimplementedRollbackPolicyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRollbackPolicyServiceServer struct{}

func (UnimplementedRollbackPolicyServiceServer) GetRollbackPolicy(context.Context, *GetRollbackPolicyRequest) (*GetRollbackPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRollbackPolicy not implemented")
}
func (UnimplementedRollbackPolicyServiceServer) CreateRollbackPolicy(context.Context, *CreateRollbackPolicyRequest) (*CreateRollbackPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRollbackPolicy not implemented")
}
func (UnimplementedRollbackPolicyServiceServer) ListRollbackPolicies(context.Context, *ListRollbackPoliciesRequest) (*ListRollbackPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRollbackPolicies not implemented")
}
func (UnimplementedRollbackPolicyServiceServer) UpdateRollbackPolicy(context.Context, *UpdateRollbackPolicyRequest) (*UpdateRollbackPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRollbackPolicy not implemented")
}
func (UnimplementedRollbackPolicyServiceServer) mustEmbedUnimplementedRollbackPolicyServiceServer() {}
func (UnimplementedRollbackPolicyServiceServer) testEmbeddedByValue()                               {}

// UnsafeRollbackPolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RollbackPolicyServiceServer will
// result in compilation errors.
type UnsafeRollbackPolicyServiceServer interface {
	mustEmbedUnimplementedRollbackPolicyServiceServer()
}

func RegisterRollbackPolicyServiceServer(s grpc.ServiceRegistrar, srv RollbackPolicyServiceServer) {
	// If the following call pancis, it indicates UnimplementedRollbackPolicyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RollbackPolicyService_ServiceDesc, srv)
}

func _RollbackPolicyService_GetRollbackPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRollbackPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollbackPolicyServiceServer).GetRollbackPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RollbackPolicyService_GetRollbackPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollbackPolicyServiceServer).GetRollbackPolicy(ctx, req.(*GetRollbackPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RollbackPolicyService_CreateRollbackPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRollbackPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollbackPolicyServiceServer).CreateRollbackPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RollbackPolicyService_CreateRollbackPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollbackPolicyServiceServer).CreateRollbackPolicy(ctx, req.(*CreateRollbackPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RollbackPolicyService_ListRollbackPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRollbackPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollbackPolicyServiceServer).ListRollbackPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RollbackPolicyService_ListRollbackPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollbackPolicyServiceServer).ListRollbackPolicies(ctx, req.(*ListRollbackPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RollbackPolicyService_UpdateRollbackPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRollbackPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollbackPolicyServiceServer).UpdateRollbackPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RollbackPolicyService_UpdateRollbackPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollbackPolicyServiceServer).UpdateRollbackPolicy(ctx, req.(*UpdateRollbackPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RollbackPolicyService_ServiceDesc is the grpc.ServiceDesc for RollbackPolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RollbackPolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.probation.v1.RollbackPolicyService",
	HandlerType: (*RollbackPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRollbackPolicy",
			Handler:    _RollbackPolicyService_GetRollbackPolicy_Handler,
		},
		{
			MethodName: "CreateRollbackPolicy",
			Handler:    _RollbackPolicyService_CreateRollbackPolicy_Handler,
		},
		{
			MethodName: "ListRollbackPolicies",
			Handler:    _RollbackPolicyService_ListRollbackPolicies_Handler,
		},
		{
			MethodName: "UpdateRollbackPolicy",
			Handler:    _RollbackPolicyService_UpdateRollbackPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job-distributor/v1/probation/probation.proto",
}
