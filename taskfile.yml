version: "3"

tasks:
  fmt:
    desc: "Run buf format"
    cmds:
      - buf format -w

  lint:
    desc: "Run buf lint"
    cmds:
      - buf lint

  proto:all:
    desc: Generate all protobuf files for all services
    cmds:
      - task proto:gen:job-distributor
      - task proto:gen:orchestrator
      - task proto:gen:svr
      - task proto:gen:rmn
      - task proto:gen:workflows
      - task proto:gen:billing
      - task go:mod:tidy
      - task proto:check:cre

  proto:gen:job-distributor:
    desc: Generate all protobuf files for the job-distributor service
    cmds:
      - find ./job-distributor/ -name '*.pb.go' -delete
      - task: proto:gen
        vars:
          SERVICE_NAME: job-distributor

  proto:gen:orchestrator:
    desc: "Generate Go code from protobuf files for orchestrator"
    cmds:
      - find ./orchestrator/ -name '*.pb.go' -delete
      - task: proto:wsrpc:gen
        vars:
          SERVICE_NAME: orchestrator

  proto:gen:svr:
    desc: "Generate Go code from protobuf files for svr"
    cmds:
      - find ./svr/ -name '*.pb.go' -delete
      - task: proto:gen
        vars:
          SERVICE_NAME: svr

  proto:gen:rmn:
    desc: "Generate Go code from protobuf files for rmn"
    cmds:
      - find ./rmn/v1.6/go -name '*.pb.go' -delete
      - |
        proto_files=$(find ./rmn/v1.6/proto -name "*.proto")
        protoc \
          -I=./rmn/v1.6/proto \
          --go_out=./rmn/v1.6/go \
          --go_opt=paths=source_relative \
          --go-grpc_out=./rmn/v1.6/go \
          --go-grpc_opt=paths=source_relative \
          $proto_files
      - cd rmn/v1.6/rust && cargo build

  proto:gen:workflows:
      desc: "Generate Go code from protobuf files for workflows"
      cmds:
        - cd workflows && make generate

  proto:gen:billing:
      desc: "Generate Go code from protobuf files for billing"
      cmds:
        - cd billing && make generate

  proto:clean:
    desc: "Clean generated protobuf files for all services"
    cmds:
      - find ./job-distributor/ -name '*.pb.go' -delete
      - find ./orchestrator/ -name '*.pb.go' -delete
      - find ./svr/ -name '*.pb.go' -delete
      - find ./billing/ -name '*.pb.go' -delete
      - find ./workflows/ -name '*.pb.go' -delete

  go:mod:tidy:
    desc: "Run go mod tidy in each service folder"
    cmds:
      - go install github.com/jmank88/gomods@v0.1.5
      - asdf reshim golang
      - gomods tidy

  proto:gen:
    internal: true
    desc: "Generate Go code from protobuf files"
    cmds:
      - |
        proto_files=$(find ./{{.SERVICE_NAME}} -name "*.proto")
        protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative $proto_files

  proto:wsrpc:gen:
    internal: true
    desc: "Generate Go code from protobuf files with wsrpc"
    cmds:
      - |
        proto_files=$(find ./{{.SERVICE_NAME}} -name "*.proto")
        protoc --go_out=. --go_opt=paths=source_relative --go-wsrpc_out=. --go-wsrpc_opt=paths=source_relative $proto_files

  proto:check:cre:
    desc: "Lint and check for breaking changes in cre/, allowing breaking changes in v0"
    cmds:
      - buf lint cre
      - |
        echo "üîç Finding all released proto paths for breaking check..."
        proto_dirs=$(
          find cre -type f -name '*.proto' |
          grep -vi 'alpha' |
          grep -vi 'beta' |
          xargs -n1 dirname |
          sort -u
        )

        if [ -z "$proto_dirs" ]; then
          echo "‚úÖ No .proto files found in current commit to check. Skipping."
          exit 0
        fi

        TARGET_COMMIT=main
        if git ls-tree -r --name-only "$TARGET_COMMIT" -- cre/ | grep -q '\.proto$'; then
          echo "‚úÖ Proto files found in target commit ($TARGET_COMMIT). Proceeding with breaking check."
        else
          echo "‚úÖ No .proto files found in the 'cre/' path of the target commit. Skipping breaking check."
          exit 0
        fi

        args=()
        for dir in $proto_dirs; do
          args+=(--path "$dir")
        done

        echo "üß™ Running buf breaking check on:"
        printf '  - %s\n' "${args[@]//--path /}"

        buf breaking "${args[@]}" --against ".git#branch=$TARGET_COMMIT"
