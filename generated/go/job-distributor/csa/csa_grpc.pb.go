// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package csa

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CSAServiceClient is the client API for CSAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSAServiceClient interface {
	GetKeypair(ctx context.Context, in *GetKeypairRequest, opts ...grpc.CallOption) (*GetKeypairResponse, error)
	ListKeypairs(ctx context.Context, in *ListKeypairsRequest, opts ...grpc.CallOption) (*ListKeypairsResponse, error)
}

type cSAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCSAServiceClient(cc grpc.ClientConnInterface) CSAServiceClient {
	return &cSAServiceClient{cc}
}

func (c *cSAServiceClient) GetKeypair(ctx context.Context, in *GetKeypairRequest, opts ...grpc.CallOption) (*GetKeypairResponse, error) {
	out := new(GetKeypairResponse)
	err := c.cc.Invoke(ctx, "/tooling.distributor.csa.CSAService/GetKeypair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSAServiceClient) ListKeypairs(ctx context.Context, in *ListKeypairsRequest, opts ...grpc.CallOption) (*ListKeypairsResponse, error) {
	out := new(ListKeypairsResponse)
	err := c.cc.Invoke(ctx, "/tooling.distributor.csa.CSAService/ListKeypairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSAServiceServer is the server API for CSAService service.
// All implementations must embed UnimplementedCSAServiceServer
// for forward compatibility
type CSAServiceServer interface {
	GetKeypair(context.Context, *GetKeypairRequest) (*GetKeypairResponse, error)
	ListKeypairs(context.Context, *ListKeypairsRequest) (*ListKeypairsResponse, error)
	mustEmbedUnimplementedCSAServiceServer()
}

// UnimplementedCSAServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCSAServiceServer struct {
}

func (UnimplementedCSAServiceServer) GetKeypair(context.Context, *GetKeypairRequest) (*GetKeypairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeypair not implemented")
}
func (UnimplementedCSAServiceServer) ListKeypairs(context.Context, *ListKeypairsRequest) (*ListKeypairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeypairs not implemented")
}
func (UnimplementedCSAServiceServer) mustEmbedUnimplementedCSAServiceServer() {}

// UnsafeCSAServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSAServiceServer will
// result in compilation errors.
type UnsafeCSAServiceServer interface {
	mustEmbedUnimplementedCSAServiceServer()
}

func RegisterCSAServiceServer(s *grpc.Server, srv CSAServiceServer) {
	s.RegisterService(&_CSAService_serviceDesc, srv)
}

func _CSAService_GetKeypair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeypairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSAServiceServer).GetKeypair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tooling.distributor.csa.CSAService/GetKeypair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSAServiceServer).GetKeypair(ctx, req.(*GetKeypairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSAService_ListKeypairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeypairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSAServiceServer).ListKeypairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tooling.distributor.csa.CSAService/ListKeypairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSAServiceServer).ListKeypairs(ctx, req.(*ListKeypairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CSAService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tooling.distributor.csa.CSAService",
	HandlerType: (*CSAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeypair",
			Handler:    _CSAService_GetKeypair_Handler,
		},
		{
			MethodName: "ListKeypairs",
			Handler:    _CSAService_ListKeypairs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job-distributor/csa/csa.proto",
}
