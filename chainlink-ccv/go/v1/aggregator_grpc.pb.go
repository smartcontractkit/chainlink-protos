// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: v1/aggregator.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Aggregator_WriteCommitCCVNodeData_FullMethodName      = "/chainlink_ccv.v1.Aggregator/WriteCommitCCVNodeData"
	Aggregator_BatchWriteCommitCCVNodeData_FullMethodName = "/chainlink_ccv.v1.Aggregator/BatchWriteCommitCCVNodeData"
	Aggregator_ReadCommitCCVNodeData_FullMethodName       = "/chainlink_ccv.v1.Aggregator/ReadCommitCCVNodeData"
	Aggregator_WriteBlockCheckpoint_FullMethodName        = "/chainlink_ccv.v1.Aggregator/WriteBlockCheckpoint"
	Aggregator_ReadBlockCheckpoint_FullMethodName         = "/chainlink_ccv.v1.Aggregator/ReadBlockCheckpoint"
)

// AggregatorClient is the client API for Aggregator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregatorClient interface {
	WriteCommitCCVNodeData(ctx context.Context, in *WriteCommitCCVNodeDataRequest, opts ...grpc.CallOption) (*WriteCommitCCVNodeDataResponse, error)
	BatchWriteCommitCCVNodeData(ctx context.Context, in *BatchWriteCommitCCVNodeDataRequest, opts ...grpc.CallOption) (*BatchWriteCommitCCVNodeDataResponse, error)
	ReadCommitCCVNodeData(ctx context.Context, in *ReadCommitCCVNodeDataRequest, opts ...grpc.CallOption) (*ReadCommitCCVNodeDataResponse, error)
	WriteBlockCheckpoint(ctx context.Context, in *WriteBlockCheckpointRequest, opts ...grpc.CallOption) (*WriteBlockCheckpointResponse, error)
	ReadBlockCheckpoint(ctx context.Context, in *ReadBlockCheckpointRequest, opts ...grpc.CallOption) (*ReadBlockCheckpointResponse, error)
}

type aggregatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorClient(cc grpc.ClientConnInterface) AggregatorClient {
	return &aggregatorClient{cc}
}

func (c *aggregatorClient) WriteCommitCCVNodeData(ctx context.Context, in *WriteCommitCCVNodeDataRequest, opts ...grpc.CallOption) (*WriteCommitCCVNodeDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteCommitCCVNodeDataResponse)
	err := c.cc.Invoke(ctx, Aggregator_WriteCommitCCVNodeData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) BatchWriteCommitCCVNodeData(ctx context.Context, in *BatchWriteCommitCCVNodeDataRequest, opts ...grpc.CallOption) (*BatchWriteCommitCCVNodeDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchWriteCommitCCVNodeDataResponse)
	err := c.cc.Invoke(ctx, Aggregator_BatchWriteCommitCCVNodeData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) ReadCommitCCVNodeData(ctx context.Context, in *ReadCommitCCVNodeDataRequest, opts ...grpc.CallOption) (*ReadCommitCCVNodeDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadCommitCCVNodeDataResponse)
	err := c.cc.Invoke(ctx, Aggregator_ReadCommitCCVNodeData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) WriteBlockCheckpoint(ctx context.Context, in *WriteBlockCheckpointRequest, opts ...grpc.CallOption) (*WriteBlockCheckpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteBlockCheckpointResponse)
	err := c.cc.Invoke(ctx, Aggregator_WriteBlockCheckpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) ReadBlockCheckpoint(ctx context.Context, in *ReadBlockCheckpointRequest, opts ...grpc.CallOption) (*ReadBlockCheckpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadBlockCheckpointResponse)
	err := c.cc.Invoke(ctx, Aggregator_ReadBlockCheckpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatorServer is the server API for Aggregator service.
// All implementations must embed UnimplementedAggregatorServer
// for forward compatibility.
type AggregatorServer interface {
	WriteCommitCCVNodeData(context.Context, *WriteCommitCCVNodeDataRequest) (*WriteCommitCCVNodeDataResponse, error)
	BatchWriteCommitCCVNodeData(context.Context, *BatchWriteCommitCCVNodeDataRequest) (*BatchWriteCommitCCVNodeDataResponse, error)
	ReadCommitCCVNodeData(context.Context, *ReadCommitCCVNodeDataRequest) (*ReadCommitCCVNodeDataResponse, error)
	WriteBlockCheckpoint(context.Context, *WriteBlockCheckpointRequest) (*WriteBlockCheckpointResponse, error)
	ReadBlockCheckpoint(context.Context, *ReadBlockCheckpointRequest) (*ReadBlockCheckpointResponse, error)
	mustEmbedUnimplementedAggregatorServer()
}

// UnimplementedAggregatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAggregatorServer struct{}

func (UnimplementedAggregatorServer) WriteCommitCCVNodeData(context.Context, *WriteCommitCCVNodeDataRequest) (*WriteCommitCCVNodeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteCommitCCVNodeData not implemented")
}
func (UnimplementedAggregatorServer) BatchWriteCommitCCVNodeData(context.Context, *BatchWriteCommitCCVNodeDataRequest) (*BatchWriteCommitCCVNodeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchWriteCommitCCVNodeData not implemented")
}
func (UnimplementedAggregatorServer) ReadCommitCCVNodeData(context.Context, *ReadCommitCCVNodeDataRequest) (*ReadCommitCCVNodeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCommitCCVNodeData not implemented")
}
func (UnimplementedAggregatorServer) WriteBlockCheckpoint(context.Context, *WriteBlockCheckpointRequest) (*WriteBlockCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteBlockCheckpoint not implemented")
}
func (UnimplementedAggregatorServer) ReadBlockCheckpoint(context.Context, *ReadBlockCheckpointRequest) (*ReadBlockCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBlockCheckpoint not implemented")
}
func (UnimplementedAggregatorServer) mustEmbedUnimplementedAggregatorServer() {}
func (UnimplementedAggregatorServer) testEmbeddedByValue()                    {}

// UnsafeAggregatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregatorServer will
// result in compilation errors.
type UnsafeAggregatorServer interface {
	mustEmbedUnimplementedAggregatorServer()
}

func RegisterAggregatorServer(s grpc.ServiceRegistrar, srv AggregatorServer) {
	// If the following call pancis, it indicates UnimplementedAggregatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Aggregator_ServiceDesc, srv)
}

func _Aggregator_WriteCommitCCVNodeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteCommitCCVNodeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).WriteCommitCCVNodeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aggregator_WriteCommitCCVNodeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).WriteCommitCCVNodeData(ctx, req.(*WriteCommitCCVNodeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_BatchWriteCommitCCVNodeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchWriteCommitCCVNodeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).BatchWriteCommitCCVNodeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aggregator_BatchWriteCommitCCVNodeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).BatchWriteCommitCCVNodeData(ctx, req.(*BatchWriteCommitCCVNodeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_ReadCommitCCVNodeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCommitCCVNodeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).ReadCommitCCVNodeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aggregator_ReadCommitCCVNodeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).ReadCommitCCVNodeData(ctx, req.(*ReadCommitCCVNodeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_WriteBlockCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteBlockCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).WriteBlockCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aggregator_WriteBlockCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).WriteBlockCheckpoint(ctx, req.(*WriteBlockCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_ReadBlockCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBlockCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).ReadBlockCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aggregator_ReadBlockCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).ReadBlockCheckpoint(ctx, req.(*ReadBlockCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Aggregator_ServiceDesc is the grpc.ServiceDesc for Aggregator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aggregator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainlink_ccv.v1.Aggregator",
	HandlerType: (*AggregatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteCommitCCVNodeData",
			Handler:    _Aggregator_WriteCommitCCVNodeData_Handler,
		},
		{
			MethodName: "BatchWriteCommitCCVNodeData",
			Handler:    _Aggregator_BatchWriteCommitCCVNodeData_Handler,
		},
		{
			MethodName: "ReadCommitCCVNodeData",
			Handler:    _Aggregator_ReadCommitCCVNodeData_Handler,
		},
		{
			MethodName: "WriteBlockCheckpoint",
			Handler:    _Aggregator_WriteBlockCheckpoint_Handler,
		},
		{
			MethodName: "ReadBlockCheckpoint",
			Handler:    _Aggregator_ReadBlockCheckpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/aggregator.proto",
}

const (
	VerifierResultAPI_GetVerifierResultForMessage_FullMethodName = "/chainlink_ccv.v1.VerifierResultAPI/GetVerifierResultForMessage"
	VerifierResultAPI_GetMessagesSince_FullMethodName            = "/chainlink_ccv.v1.VerifierResultAPI/GetMessagesSince"
)

// VerifierResultAPIClient is the client API for VerifierResultAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerifierResultAPIClient interface {
	GetVerifierResultForMessage(ctx context.Context, in *GetVerifierResultForMessageRequest, opts ...grpc.CallOption) (*VerifierResult, error)
	GetMessagesSince(ctx context.Context, in *GetMessagesSinceRequest, opts ...grpc.CallOption) (*GetMessagesSinceResponse, error)
}

type verifierResultAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifierResultAPIClient(cc grpc.ClientConnInterface) VerifierResultAPIClient {
	return &verifierResultAPIClient{cc}
}

func (c *verifierResultAPIClient) GetVerifierResultForMessage(ctx context.Context, in *GetVerifierResultForMessageRequest, opts ...grpc.CallOption) (*VerifierResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifierResult)
	err := c.cc.Invoke(ctx, VerifierResultAPI_GetVerifierResultForMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierResultAPIClient) GetMessagesSince(ctx context.Context, in *GetMessagesSinceRequest, opts ...grpc.CallOption) (*GetMessagesSinceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessagesSinceResponse)
	err := c.cc.Invoke(ctx, VerifierResultAPI_GetMessagesSince_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerifierResultAPIServer is the server API for VerifierResultAPI service.
// All implementations must embed UnimplementedVerifierResultAPIServer
// for forward compatibility.
type VerifierResultAPIServer interface {
	GetVerifierResultForMessage(context.Context, *GetVerifierResultForMessageRequest) (*VerifierResult, error)
	GetMessagesSince(context.Context, *GetMessagesSinceRequest) (*GetMessagesSinceResponse, error)
	mustEmbedUnimplementedVerifierResultAPIServer()
}

// UnimplementedVerifierResultAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVerifierResultAPIServer struct{}

func (UnimplementedVerifierResultAPIServer) GetVerifierResultForMessage(context.Context, *GetVerifierResultForMessageRequest) (*VerifierResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerifierResultForMessage not implemented")
}
func (UnimplementedVerifierResultAPIServer) GetMessagesSince(context.Context, *GetMessagesSinceRequest) (*GetMessagesSinceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesSince not implemented")
}
func (UnimplementedVerifierResultAPIServer) mustEmbedUnimplementedVerifierResultAPIServer() {}
func (UnimplementedVerifierResultAPIServer) testEmbeddedByValue()                           {}

// UnsafeVerifierResultAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerifierResultAPIServer will
// result in compilation errors.
type UnsafeVerifierResultAPIServer interface {
	mustEmbedUnimplementedVerifierResultAPIServer()
}

func RegisterVerifierResultAPIServer(s grpc.ServiceRegistrar, srv VerifierResultAPIServer) {
	// If the following call pancis, it indicates UnimplementedVerifierResultAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VerifierResultAPI_ServiceDesc, srv)
}

func _VerifierResultAPI_GetVerifierResultForMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVerifierResultForMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierResultAPIServer).GetVerifierResultForMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierResultAPI_GetVerifierResultForMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierResultAPIServer).GetVerifierResultForMessage(ctx, req.(*GetVerifierResultForMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifierResultAPI_GetMessagesSince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesSinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierResultAPIServer).GetMessagesSince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierResultAPI_GetMessagesSince_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierResultAPIServer).GetMessagesSince(ctx, req.(*GetMessagesSinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VerifierResultAPI_ServiceDesc is the grpc.ServiceDesc for VerifierResultAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VerifierResultAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainlink_ccv.v1.VerifierResultAPI",
	HandlerType: (*VerifierResultAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVerifierResultForMessage",
			Handler:    _VerifierResultAPI_GetVerifierResultForMessage_Handler,
		},
		{
			MethodName: "GetMessagesSince",
			Handler:    _VerifierResultAPI_GetMessagesSince_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/aggregator.proto",
}
