// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: serialization/rageproxy.proto

package serialization

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageProxyToProxyTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderPeerId []byte `protobuf:"bytes,1,opt,name=senderPeerId,proto3" json:"senderPeerId,omitempty"`
	StreamName   string `protobuf:"bytes,2,opt,name=streamName,proto3" json:"streamName,omitempty"`
	Payload      []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MessageProxyToProxyTarget) Reset() {
	*x = MessageProxyToProxyTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serialization_rageproxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageProxyToProxyTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageProxyToProxyTarget) ProtoMessage() {}

func (x *MessageProxyToProxyTarget) ProtoReflect() protoreflect.Message {
	mi := &file_serialization_rageproxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageProxyToProxyTarget.ProtoReflect.Descriptor instead.
func (*MessageProxyToProxyTarget) Descriptor() ([]byte, []int) {
	return file_serialization_rageproxy_proto_rawDescGZIP(), []int{0}
}

func (x *MessageProxyToProxyTarget) GetSenderPeerId() []byte {
	if x != nil {
		return x.SenderPeerId
	}
	return nil
}

func (x *MessageProxyToProxyTarget) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *MessageProxyToProxyTarget) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type MessageProxyTargetToProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverPeerId []byte `protobuf:"bytes,1,opt,name=receiverPeerId,proto3" json:"receiverPeerId,omitempty"`
	StreamName     string `protobuf:"bytes,2,opt,name=streamName,proto3" json:"streamName,omitempty"`
	Payload        []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MessageProxyTargetToProxy) Reset() {
	*x = MessageProxyTargetToProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serialization_rageproxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageProxyTargetToProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageProxyTargetToProxy) ProtoMessage() {}

func (x *MessageProxyTargetToProxy) ProtoReflect() protoreflect.Message {
	mi := &file_serialization_rageproxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageProxyTargetToProxy.ProtoReflect.Descriptor instead.
func (*MessageProxyTargetToProxy) Descriptor() ([]byte, []int) {
	return file_serialization_rageproxy_proto_rawDescGZIP(), []int{1}
}

func (x *MessageProxyTargetToProxy) GetReceiverPeerId() []byte {
	if x != nil {
		return x.ReceiverPeerId
	}
	return nil
}

func (x *MessageProxyTargetToProxy) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *MessageProxyTargetToProxy) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type AddGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigDigest  []byte          `protobuf:"bytes,1,opt,name=configDigest,proto3" json:"configDigest,omitempty"`
	PeerIds       [][]byte        `protobuf:"bytes,2,rep,name=peerIds,proto3" json:"peerIds,omitempty"` // convert to string?
	Bootstrappers []*Bootstrapper `protobuf:"bytes,3,rep,name=bootstrappers,proto3" json:"bootstrappers,omitempty"`
}

func (x *AddGroup) Reset() {
	*x = AddGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serialization_rageproxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGroup) ProtoMessage() {}

func (x *AddGroup) ProtoReflect() protoreflect.Message {
	mi := &file_serialization_rageproxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGroup.ProtoReflect.Descriptor instead.
func (*AddGroup) Descriptor() ([]byte, []int) {
	return file_serialization_rageproxy_proto_rawDescGZIP(), []int{2}
}

func (x *AddGroup) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

func (x *AddGroup) GetPeerIds() [][]byte {
	if x != nil {
		return x.PeerIds
	}
	return nil
}

func (x *AddGroup) GetBootstrappers() []*Bootstrapper {
	if x != nil {
		return x.Bootstrappers
	}
	return nil
}

type RemoveGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigDigest []byte `protobuf:"bytes,1,opt,name=configDigest,proto3" json:"configDigest,omitempty"`
}

func (x *RemoveGroup) Reset() {
	*x = RemoveGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serialization_rageproxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveGroup) ProtoMessage() {}

func (x *RemoveGroup) ProtoReflect() protoreflect.Message {
	mi := &file_serialization_rageproxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveGroup.ProtoReflect.Descriptor instead.
func (*RemoveGroup) Descriptor() ([]byte, []int) {
	return file_serialization_rageproxy_proto_rawDescGZIP(), []int{3}
}

func (x *RemoveGroup) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

// To be kept in sync with https://pkg.go.dev/github.com/smartcontractkit/libocr@v0.0.0-20240717170647-ae747ca5b812/ragep2p#TokenBucketParams
type TokenBucketParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate     float64 `protobuf:"fixed64,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Capacity uint32  `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *TokenBucketParams) Reset() {
	*x = TokenBucketParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serialization_rageproxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBucketParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBucketParams) ProtoMessage() {}

func (x *TokenBucketParams) ProtoReflect() protoreflect.Message {
	mi := &file_serialization_rageproxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBucketParams.ProtoReflect.Descriptor instead.
func (*TokenBucketParams) Descriptor() ([]byte, []int) {
	return file_serialization_rageproxy_proto_rawDescGZIP(), []int{4}
}

func (x *TokenBucketParams) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *TokenBucketParams) GetCapacity() uint32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

// To be kept in sync with https://pkg.go.dev/github.com/smartcontractkit/libocr@v0.0.0-20240717170647-ae747ca5b812/ragep2p#Host.NewStream
type NewStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Other              []byte             `protobuf:"bytes,1,opt,name=other,proto3" json:"other,omitempty"`
	StreamName         string             `protobuf:"bytes,2,opt,name=streamName,proto3" json:"streamName,omitempty"`
	OutgoingBufferSize uint64             `protobuf:"varint,3,opt,name=outgoingBufferSize,proto3" json:"outgoingBufferSize,omitempty"`
	IncomingBufferSize uint64             `protobuf:"varint,4,opt,name=incomingBufferSize,proto3" json:"incomingBufferSize,omitempty"`
	MaxMessageLength   uint64             `protobuf:"varint,5,opt,name=maxMessageLength,proto3" json:"maxMessageLength,omitempty"`
	MessagesLimit      *TokenBucketParams `protobuf:"bytes,6,opt,name=messagesLimit,proto3" json:"messagesLimit,omitempty"`
	BytesLimit         *TokenBucketParams `protobuf:"bytes,7,opt,name=bytesLimit,proto3" json:"bytesLimit,omitempty"`
}

func (x *NewStream) Reset() {
	*x = NewStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serialization_rageproxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewStream) ProtoMessage() {}

func (x *NewStream) ProtoReflect() protoreflect.Message {
	mi := &file_serialization_rageproxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewStream.ProtoReflect.Descriptor instead.
func (*NewStream) Descriptor() ([]byte, []int) {
	return file_serialization_rageproxy_proto_rawDescGZIP(), []int{5}
}

func (x *NewStream) GetOther() []byte {
	if x != nil {
		return x.Other
	}
	return nil
}

func (x *NewStream) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *NewStream) GetOutgoingBufferSize() uint64 {
	if x != nil {
		return x.OutgoingBufferSize
	}
	return 0
}

func (x *NewStream) GetIncomingBufferSize() uint64 {
	if x != nil {
		return x.IncomingBufferSize
	}
	return 0
}

func (x *NewStream) GetMaxMessageLength() uint64 {
	if x != nil {
		return x.MaxMessageLength
	}
	return 0
}

func (x *NewStream) GetMessagesLimit() *TokenBucketParams {
	if x != nil {
		return x.MessagesLimit
	}
	return nil
}

func (x *NewStream) GetBytesLimit() *TokenBucketParams {
	if x != nil {
		return x.BytesLimit
	}
	return nil
}

type CloseStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Other      []byte `protobuf:"bytes,1,opt,name=other,proto3" json:"other,omitempty"`
	StreamName string `protobuf:"bytes,2,opt,name=streamName,proto3" json:"streamName,omitempty"`
}

func (x *CloseStream) Reset() {
	*x = CloseStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serialization_rageproxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseStream) ProtoMessage() {}

func (x *CloseStream) ProtoReflect() protoreflect.Message {
	mi := &file_serialization_rageproxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseStream.ProtoReflect.Descriptor instead.
func (*CloseStream) Descriptor() ([]byte, []int) {
	return file_serialization_rageproxy_proto_rawDescGZIP(), []int{6}
}

func (x *CloseStream) GetOther() []byte {
	if x != nil {
		return x.Other
	}
	return nil
}

func (x *CloseStream) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

type Bootstrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId []byte   `protobuf:"bytes,1,opt,name=peerId,proto3" json:"peerId,omitempty"`
	Addrs  []string `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (x *Bootstrapper) Reset() {
	*x = Bootstrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serialization_rageproxy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bootstrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bootstrapper) ProtoMessage() {}

func (x *Bootstrapper) ProtoReflect() protoreflect.Message {
	mi := &file_serialization_rageproxy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bootstrapper.ProtoReflect.Descriptor instead.
func (*Bootstrapper) Descriptor() ([]byte, []int) {
	return file_serialization_rageproxy_proto_rawDescGZIP(), []int{7}
}

func (x *Bootstrapper) GetPeerId() []byte {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *Bootstrapper) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type ProxyTargetToProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*ProxyTargetToProxy_AddGroup
	//	*ProxyTargetToProxy_RemoveGroup
	//	*ProxyTargetToProxy_NewStream
	//	*ProxyTargetToProxy_CloseStream
	//	*ProxyTargetToProxy_MessageProxyTargetToProxy
	Msg isProxyTargetToProxy_Msg `protobuf_oneof:"msg"`
}

func (x *ProxyTargetToProxy) Reset() {
	*x = ProxyTargetToProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serialization_rageproxy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyTargetToProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyTargetToProxy) ProtoMessage() {}

func (x *ProxyTargetToProxy) ProtoReflect() protoreflect.Message {
	mi := &file_serialization_rageproxy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyTargetToProxy.ProtoReflect.Descriptor instead.
func (*ProxyTargetToProxy) Descriptor() ([]byte, []int) {
	return file_serialization_rageproxy_proto_rawDescGZIP(), []int{8}
}

func (m *ProxyTargetToProxy) GetMsg() isProxyTargetToProxy_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *ProxyTargetToProxy) GetAddGroup() *AddGroup {
	if x, ok := x.GetMsg().(*ProxyTargetToProxy_AddGroup); ok {
		return x.AddGroup
	}
	return nil
}

func (x *ProxyTargetToProxy) GetRemoveGroup() *RemoveGroup {
	if x, ok := x.GetMsg().(*ProxyTargetToProxy_RemoveGroup); ok {
		return x.RemoveGroup
	}
	return nil
}

func (x *ProxyTargetToProxy) GetNewStream() *NewStream {
	if x, ok := x.GetMsg().(*ProxyTargetToProxy_NewStream); ok {
		return x.NewStream
	}
	return nil
}

func (x *ProxyTargetToProxy) GetCloseStream() *CloseStream {
	if x, ok := x.GetMsg().(*ProxyTargetToProxy_CloseStream); ok {
		return x.CloseStream
	}
	return nil
}

func (x *ProxyTargetToProxy) GetMessageProxyTargetToProxy() *MessageProxyTargetToProxy {
	if x, ok := x.GetMsg().(*ProxyTargetToProxy_MessageProxyTargetToProxy); ok {
		return x.MessageProxyTargetToProxy
	}
	return nil
}

type isProxyTargetToProxy_Msg interface {
	isProxyTargetToProxy_Msg()
}

type ProxyTargetToProxy_AddGroup struct {
	AddGroup *AddGroup `protobuf:"bytes,1,opt,name=addGroup,proto3,oneof"`
}

type ProxyTargetToProxy_RemoveGroup struct {
	RemoveGroup *RemoveGroup `protobuf:"bytes,2,opt,name=removeGroup,proto3,oneof"`
}

type ProxyTargetToProxy_NewStream struct {
	NewStream *NewStream `protobuf:"bytes,3,opt,name=newStream,proto3,oneof"`
}

type ProxyTargetToProxy_CloseStream struct {
	CloseStream *CloseStream `protobuf:"bytes,4,opt,name=closeStream,proto3,oneof"`
}

type ProxyTargetToProxy_MessageProxyTargetToProxy struct {
	MessageProxyTargetToProxy *MessageProxyTargetToProxy `protobuf:"bytes,5,opt,name=messageProxyTargetToProxy,proto3,oneof"`
}

func (*ProxyTargetToProxy_AddGroup) isProxyTargetToProxy_Msg() {}

func (*ProxyTargetToProxy_RemoveGroup) isProxyTargetToProxy_Msg() {}

func (*ProxyTargetToProxy_NewStream) isProxyTargetToProxy_Msg() {}

func (*ProxyTargetToProxy_CloseStream) isProxyTargetToProxy_Msg() {}

func (*ProxyTargetToProxy_MessageProxyTargetToProxy) isProxyTargetToProxy_Msg() {}

type ProxyToProxyTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*ProxyToProxyTarget_MessageProxyToProxyTarget
	Msg isProxyToProxyTarget_Msg `protobuf_oneof:"msg"`
}

func (x *ProxyToProxyTarget) Reset() {
	*x = ProxyToProxyTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serialization_rageproxy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyToProxyTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyToProxyTarget) ProtoMessage() {}

func (x *ProxyToProxyTarget) ProtoReflect() protoreflect.Message {
	mi := &file_serialization_rageproxy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyToProxyTarget.ProtoReflect.Descriptor instead.
func (*ProxyToProxyTarget) Descriptor() ([]byte, []int) {
	return file_serialization_rageproxy_proto_rawDescGZIP(), []int{9}
}

func (m *ProxyToProxyTarget) GetMsg() isProxyToProxyTarget_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *ProxyToProxyTarget) GetMessageProxyToProxyTarget() *MessageProxyToProxyTarget {
	if x, ok := x.GetMsg().(*ProxyToProxyTarget_MessageProxyToProxyTarget); ok {
		return x.MessageProxyToProxyTarget
	}
	return nil
}

type isProxyToProxyTarget_Msg interface {
	isProxyToProxyTarget_Msg()
}

type ProxyToProxyTarget_MessageProxyToProxyTarget struct {
	MessageProxyToProxyTarget *MessageProxyToProxyTarget `protobuf:"bytes,1,opt,name=messageProxyToProxyTarget,proto3,oneof"`
}

func (*ProxyToProxyTarget_MessageProxyToProxyTarget) isProxyToProxyTarget_Msg() {}

var File_serialization_rageproxy_proto protoreflect.FileDescriptor

var file_serialization_rageproxy_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x72, 0x61, 0x67, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x72, 0x61, 0x67, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x22, 0x79, 0x0a, 0x19, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x7d, 0x0a, 0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12,
	0x3d, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x67, 0x65, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52,
	0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x22, 0x31,
	0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x22, 0x43, 0x0a, 0x11, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0xcf, 0x02, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61,
	0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x72, 0x61, 0x67, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x72, 0x61, 0x67, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x43, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a,
	0x0c, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x22, 0xe2, 0x02, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x67, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x08, 0x61, 0x64, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x67,
	0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x67, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65,
	0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72,
	0x61, 0x67, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x64, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x61, 0x67, 0x65, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x00, 0x52, 0x19,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x81, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x64, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x61, 0x67,
	0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x54, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x05, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x2f, 0x3b, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_serialization_rageproxy_proto_rawDescOnce sync.Once
	file_serialization_rageproxy_proto_rawDescData = file_serialization_rageproxy_proto_rawDesc
)

func file_serialization_rageproxy_proto_rawDescGZIP() []byte {
	file_serialization_rageproxy_proto_rawDescOnce.Do(func() {
		file_serialization_rageproxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_serialization_rageproxy_proto_rawDescData)
	})
	return file_serialization_rageproxy_proto_rawDescData
}

var file_serialization_rageproxy_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_serialization_rageproxy_proto_goTypes = []any{
	(*MessageProxyToProxyTarget)(nil), // 0: rageproxy.MessageProxyToProxyTarget
	(*MessageProxyTargetToProxy)(nil), // 1: rageproxy.MessageProxyTargetToProxy
	(*AddGroup)(nil),                  // 2: rageproxy.AddGroup
	(*RemoveGroup)(nil),               // 3: rageproxy.RemoveGroup
	(*TokenBucketParams)(nil),         // 4: rageproxy.TokenBucketParams
	(*NewStream)(nil),                 // 5: rageproxy.NewStream
	(*CloseStream)(nil),               // 6: rageproxy.CloseStream
	(*Bootstrapper)(nil),              // 7: rageproxy.Bootstrapper
	(*ProxyTargetToProxy)(nil),        // 8: rageproxy.ProxyTargetToProxy
	(*ProxyToProxyTarget)(nil),        // 9: rageproxy.ProxyToProxyTarget
}
var file_serialization_rageproxy_proto_depIdxs = []int32{
	7, // 0: rageproxy.AddGroup.bootstrappers:type_name -> rageproxy.Bootstrapper
	4, // 1: rageproxy.NewStream.messagesLimit:type_name -> rageproxy.TokenBucketParams
	4, // 2: rageproxy.NewStream.bytesLimit:type_name -> rageproxy.TokenBucketParams
	2, // 3: rageproxy.ProxyTargetToProxy.addGroup:type_name -> rageproxy.AddGroup
	3, // 4: rageproxy.ProxyTargetToProxy.removeGroup:type_name -> rageproxy.RemoveGroup
	5, // 5: rageproxy.ProxyTargetToProxy.newStream:type_name -> rageproxy.NewStream
	6, // 6: rageproxy.ProxyTargetToProxy.closeStream:type_name -> rageproxy.CloseStream
	1, // 7: rageproxy.ProxyTargetToProxy.messageProxyTargetToProxy:type_name -> rageproxy.MessageProxyTargetToProxy
	0, // 8: rageproxy.ProxyToProxyTarget.messageProxyToProxyTarget:type_name -> rageproxy.MessageProxyToProxyTarget
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_serialization_rageproxy_proto_init() }
func file_serialization_rageproxy_proto_init() {
	if File_serialization_rageproxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_serialization_rageproxy_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MessageProxyToProxyTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serialization_rageproxy_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MessageProxyTargetToProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serialization_rageproxy_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AddGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serialization_rageproxy_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serialization_rageproxy_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TokenBucketParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serialization_rageproxy_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*NewStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serialization_rageproxy_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CloseStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serialization_rageproxy_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Bootstrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serialization_rageproxy_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ProxyTargetToProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serialization_rageproxy_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ProxyToProxyTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_serialization_rageproxy_proto_msgTypes[8].OneofWrappers = []any{
		(*ProxyTargetToProxy_AddGroup)(nil),
		(*ProxyTargetToProxy_RemoveGroup)(nil),
		(*ProxyTargetToProxy_NewStream)(nil),
		(*ProxyTargetToProxy_CloseStream)(nil),
		(*ProxyTargetToProxy_MessageProxyTargetToProxy)(nil),
	}
	file_serialization_rageproxy_proto_msgTypes[9].OneofWrappers = []any{
		(*ProxyToProxyTarget_MessageProxyToProxyTarget)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_serialization_rageproxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_serialization_rageproxy_proto_goTypes,
		DependencyIndexes: file_serialization_rageproxy_proto_depIdxs,
		MessageInfos:      file_serialization_rageproxy_proto_msgTypes,
	}.Build()
	File_serialization_rageproxy_proto = out.File
	file_serialization_rageproxy_proto_rawDesc = nil
	file_serialization_rageproxy_proto_goTypes = nil
	file_serialization_rageproxy_proto_depIdxs = nil
}
