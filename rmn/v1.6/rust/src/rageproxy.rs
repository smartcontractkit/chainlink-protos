// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageProxyToProxyTarget {
    #[prost(bytes = "vec", tag = "1")]
    pub sender_peer_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub stream_name: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageProxyTargetToProxy {
    #[prost(bytes = "vec", tag = "1")]
    pub receiver_peer_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub stream_name: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddGroup {
    #[prost(bytes = "vec", tag = "1")]
    pub config_digest: ::prost::alloc::vec::Vec<u8>,
    /// convert to string?
    #[prost(bytes = "vec", repeated, tag = "2")]
    pub peer_ids: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(message, repeated, tag = "3")]
    pub bootstrappers: ::prost::alloc::vec::Vec<Bootstrapper>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveGroup {
    #[prost(bytes = "vec", tag = "1")]
    pub config_digest: ::prost::alloc::vec::Vec<u8>,
}
/// To be kept in sync with <https://pkg.go.dev/github.com/smartcontractkit/libocr@v0.0.0-20240717170647-ae747ca5b812/ragep2p#TokenBucketParams>
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TokenBucketParams {
    #[prost(double, tag = "1")]
    pub rate: f64,
    #[prost(uint32, tag = "2")]
    pub capacity: u32,
}
/// To be kept in sync with <https://pkg.go.dev/github.com/smartcontractkit/libocr@v0.0.0-20240717170647-ae747ca5b812/ragep2p#Host.NewStream>
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewStream {
    #[prost(bytes = "vec", tag = "1")]
    pub other: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub stream_name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub outgoing_buffer_size: u64,
    #[prost(uint64, tag = "4")]
    pub incoming_buffer_size: u64,
    #[prost(uint64, tag = "5")]
    pub max_message_length: u64,
    #[prost(message, optional, tag = "6")]
    pub messages_limit: ::core::option::Option<TokenBucketParams>,
    #[prost(message, optional, tag = "7")]
    pub bytes_limit: ::core::option::Option<TokenBucketParams>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloseStream {
    #[prost(bytes = "vec", tag = "1")]
    pub other: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub stream_name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bootstrapper {
    #[prost(bytes = "vec", tag = "1")]
    pub peer_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, repeated, tag = "2")]
    pub addrs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProxyTargetToProxy {
    #[prost(oneof = "proxy_target_to_proxy::Msg", tags = "1, 2, 3, 4, 5")]
    pub msg: ::core::option::Option<proxy_target_to_proxy::Msg>,
}
/// Nested message and enum types in `ProxyTargetToProxy`.
pub mod proxy_target_to_proxy {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Msg {
        #[prost(message, tag = "1")]
        AddGroup(super::AddGroup),
        #[prost(message, tag = "2")]
        RemoveGroup(super::RemoveGroup),
        #[prost(message, tag = "3")]
        NewStream(super::NewStream),
        #[prost(message, tag = "4")]
        CloseStream(super::CloseStream),
        #[prost(message, tag = "5")]
        MessageProxyTargetToProxy(super::MessageProxyTargetToProxy),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProxyToProxyTarget {
    #[prost(oneof = "proxy_to_proxy_target::Msg", tags = "1")]
    pub msg: ::core::option::Option<proxy_to_proxy_target::Msg>,
}
/// Nested message and enum types in `ProxyToProxyTarget`.
pub mod proxy_to_proxy_target {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Msg {
        #[prost(message, tag = "1")]
        MessageProxyToProxyTarget(super::MessageProxyToProxyTarget),
    }
}
