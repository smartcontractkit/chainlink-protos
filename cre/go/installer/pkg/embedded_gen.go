// Code generated by github.com/smartcontractkit/chainlink-protos/cre/go/installer/bootstrap. DO NOT EDIT.\n")
package pkg

const blockchainEvmV1alphaClientEmbedded = `syntax = "proto3";

package capabilities.blockchain.evm.v1alpha;

import "google/protobuf/empty.proto";
import "sdk/v1alpha/sdk.proto";
import "tools/generator/v1alpha/cre_metadata.proto";
import "values/v1/values.proto";

enum ConfidenceLevel {
  CONFIDENCE_LEVEL_SAFE = 0;
  CONFIDENCE_LEVEL_LATEST = 1;
  CONFIDENCE_LEVEL_FINALIZED = 2;
}

message TopicValues {
  repeated bytes values = 1; // list of possible values for any topic, in [32]byte fix-sized array format
}

message FilterLogTriggerRequest {
  repeated bytes addresses = 1; // list of addresses to include in evm address [20]byte fix-sized array format, at least one address is required
  /*
     TopicValues is a fixed 4 length array of possible values for any topic where:
       a) the first element is an array of the event signatures (keccak256 of the event name and indexed args types), it has to have at least one value
       b) the second element is an array of possible values for the first indexed argument, can be empty
       c) the third element is an array of possible values for the second indexed argument, can be empty
       d) the fourth element is an array of possible values for the third indexed argument, can be empty
  */
  repeated TopicValues topics = 2;
  ConfidenceLevel confidence = 3; // optional, defaults to "SAFE"
}

// CallContractRequest has arguments for reading a contract as specified in the call message at a block height defined by blockNumber where:
// blockNumber :
//	nil (default) or (-2) → use the latest mined block (“latest”)
//	FinalizedBlockNumber(-3) → last finalized block (“finalized”)
//
// Any positive value is treated as an explicit block height.
message CallContractRequest {
  CallMsg call = 1;
  values.v1.BigInt block_number = 2;
}

message CallContractReply {
  bytes data = 1; // solidity-spec abi encoded bytes
}

message FilterLogsRequest {
  FilterQuery filter_query = 1;
}

message FilterLogsReply {
  repeated Log logs = 1;
}

// represents evm-style log
message Log {
  bytes address = 1; // address of the contract emitted the log in evm address [20]byte fix-sized array format
  repeated bytes topics = 2; // indexed log fields, in [32]byte fix-sized array format
  bytes tx_hash = 3; // hash of the transaction containing the log, in [32]byte fix-sized array format
  bytes block_hash = 4; // hash of the block containing the log, in [32]byte fix-sized array format
  bytes data = 5; // solidity-spec abi encoded log Data
  bytes event_sig = 6; // keccak256 of event signature, in [32]byte fix-sized array format
  values.v1.BigInt block_number = 7; // block number containing the log
  uint32 tx_index = 8; // index of transaction emmited the log
  uint32 index = 9; // index of the Log within the intire block
  bool removed = 10; // flag if the log was removed during reorg
}

// represents simplified evm-style CallMsg
message CallMsg {
  bytes from = 1; // sender address in evm address [20]byte fix-sized array format
  bytes to = 2; // contract address in evm address [20]byte fix-sized array format
  bytes data = 3; // solidity-spec abi encoded bytes
}

// represents evm-style filter query
message FilterQuery {
  bytes block_hash = 1; // exact block (cant use from/to), in [32]byte fix-sized array format
  values.v1.BigInt from_block = 2; // start block range
  values.v1.BigInt to_block = 3; // end block range
  repeated bytes addresses = 4; // contract(s) to filter logs from in evm address [20]byte fix-sized array format
  repeated Topics topics = 5; // filter log by event signature and indexed args
}

message Topics {
  repeated bytes topic = 1; // in [32]byte fix-sized array format
}

message BalanceAtRequest {
  bytes account = 1; // in evm address [20]byte fix-sized array format
  values.v1.BigInt block_number = 2;
}

message BalanceAtReply {
  values.v1.BigInt balance = 1; // Balance of the account in wei (10^-18 eth)
}

message EstimateGasRequest {
  CallMsg msg = 1; // simulates tx execution returns approximate amount of gas units needed
}

message EstimateGasReply {
  uint64 gas = 1; // estimated amount of gas in gas units, needed for tx execution
}

message GetTransactionByHashRequest {
  bytes hash = 1; // in [32]byte fix-sized array format
}

message GetTransactionByHashReply {
  Transaction transaction = 1;
}

// represents evm-style transaction
message Transaction {
  uint64 nonce = 1; // number of txs sent from sender
  uint64 gas = 2; // max gas allowed per execution (in gas units)
  bytes to = 3; // recipient address in evm address [20]byte fix-sized array format
  bytes data = 4; // solidity-spec abi encoded input data for function call payload
  bytes hash = 5; // transaction hash, in [32]byte fix-sized array format
  values.v1.BigInt value = 6; // amount of eth sent in wei
  values.v1.BigInt gas_price = 7; // price for a single gas unit in wei
}

message GetTransactionReceiptRequest {
  bytes hash = 1; // in [32]byte fix-sized array format
}

message GetTransactionReceiptReply {
  Receipt receipt = 1;
}

// represents evm-style receipt
message Receipt {
  uint64 status = 1; // 1 for success 0 for failure
  uint64 gas_used = 2; // gas used by this transaction (in gas units)
  uint64 tx_index = 3; // index of the transaction inside of the block
  bytes block_hash = 4; // block hash containing the transaction
  repeated Log logs = 6; // logs emitted by this transaction
  bytes tx_hash = 7; // hash of the transaction this receipt is for, in [32]byte fix-sized array format
  values.v1.BigInt effective_gas_price = 8; // actual gas price paid in wei (include after EIP-1559)
  values.v1.BigInt block_number = 9; // block number containing the transaction
  bytes contract_address = 10; // address of the contract if this transaction created one in evm address [20]byte fix-sized array format
}

// ----- Request/Reply Wrappers -----
message HeaderByNumberRequest {
  values.v1.BigInt block_number = 1;
}
message HeaderByNumberReply {
  Header header = 1;
}

message Header {
  uint64 timestamp = 1; // unix timestamp
  values.v1.BigInt block_number = 2;
  bytes hash = 3; // in [32]byte fix-sized array format
  bytes parent_hash = 4; // in [32]byte fix-sized array format
}

message RegisterLogTrackingRequest {
  LPFilter filter = 1;
}

message LPFilter {
  uint64 max_logs_kept = 1; // maximum number of logs to retain ( 0 = unlimited )
  int64 retention_time = 2; // maximum amount of time to retain logs in seconds
  uint64 logs_per_block = 3; // rate limit ( maximum # of logs per block, 0 = unlimited )
  string name = 4; // filter name, has to persist for removing filter
  repeated bytes addresses = 5; // list of addresses to include in evm address [20]byte fix-sized array format
  repeated bytes event_sigs = 6; // list of possible signatures (aka topic1), in [32]byte fix-sized array format
  repeated bytes topic2 = 7; // list of possible values for topic2, in [32]byte fix-sized array format
  repeated bytes topic3 = 8; // list of possible values for topic3, in [32]byte fix-sized array format
  repeated bytes topic4 = 9; // list of possible values for topic4, in [32]byte fix-sized array format
}

message UnregisterLogTrackingRequest {
  string filter_name = 1;
}

service Client {
  option (tools.generator.v1alpha.capability) = {
    mode: MODE_DON
    capability_id: "evm@1.0.0"
    labels: {
      // from https://github.com/smartcontractkit/chain-selectors/blob/main/selectors.yml
      // as a subset of the selectors supported on the CRE
      key: "ChainSelector"
      value: {
        uint64_label: {
          defaults: [
            {
              key: "ethereum-mainnet-arbitrum-1"
              value: 4949039107694359620
            },
            {
              key: "ethereum-mainnet"
              value: 5009297550715157269
            },
            {
              key: "polygon-mainnet"
              value: 4051577828743386545
            },
            {
              key: "binance_smart_chain-mainnet-opbnb-1"
              value: 465944652040885897
            },
            {
              key: "avalanche-mainnet"
              value: 6433500567565415381
            },
            {
              key: "ethereum-mainnet-optimism-1"
              value: 3734403246176062136
            },
            {
              key: "ethereum-testnet-sepolia-arbitrum-1"
              value: 3478487238524512106
            },
            {
              key: "ethereum-testnet-sepolia"
              value: 16015286601757825753
            },
            {
              key: "ethereum-testnet-sepolia-base-1"
              value: 10344971235874465080
            },
            {
              key: "polygon-testnet-amoy"
              value: 16281711391670634445
            },
            {
              key: "binance_smart_chain-testnet-opbnb-1"
              value: 13274425992935471758
            },
            {
              key: "avalanche-testnet-fuji"
              value: 14767482510784806043
            },
            {
              key: "ethereum-testnet-sepolia-optimism-1"
              value: 5224473277236331295
            }
          ]
        }
      }
    }
  };
  rpc CallContract(CallContractRequest) returns (CallContractReply);
  rpc FilterLogs(FilterLogsRequest) returns (FilterLogsReply);
  rpc BalanceAt(BalanceAtRequest) returns (BalanceAtReply);
  rpc EstimateGas(EstimateGasRequest) returns (EstimateGasReply);
  rpc GetTransactionByHash(GetTransactionByHashRequest) returns (GetTransactionByHashReply);
  rpc GetTransactionReceipt(GetTransactionReceiptRequest) returns (GetTransactionReceiptReply);
  rpc HeaderByNumber(HeaderByNumberRequest) returns (HeaderByNumberReply);
  rpc RegisterLogTracking(RegisterLogTrackingRequest) returns (google.protobuf.Empty);
  rpc UnregisterLogTracking(UnregisterLogTrackingRequest) returns (google.protobuf.Empty);
  rpc LogTrigger(FilterLogTriggerRequest) returns (stream Log);
  rpc WriteReport(WriteReportRequest) returns (WriteReportReply);
}

enum ReceiverContractExecutionStatus {
  RECEIVER_CONTRACT_EXECUTION_STATUS_SUCCESS = 0;
  RECEIVER_CONTRACT_EXECUTION_STATUS_REVERTED = 1;
}

message WriteReportRequest {
  bytes receiver = 1;
  sdk.v1alpha.ReportResponse report = 2;
  optional GasConfig gas_config = 3;
}

message GasConfig {
  uint64 gas_limit = 1;
}

enum TxStatus {
  TX_STATUS_FATAL = 0;
  TX_STATUS_REVERTED = 1;
  TX_STATUS_SUCCESS = 2;
}

message WriteReportReply {
  TxStatus tx_status = 1;
  optional ReceiverContractExecutionStatus receiver_contract_execution_status = 2;
  optional bytes tx_hash = 3;
  optional values.v1.BigInt transaction_fee = 4;
  optional string error_message = 5;
}
`

const internalActionandtriggerV1ActionAndTriggerEmbedded = `syntax = "proto3";

package capabilities.internal.actionandtrigger.v1;

import "tools/generator/v1alpha/cre_metadata.proto";

message Config {
  string name = 1;
  int32 number = 2;
}

message TriggerEvent {
  string cool_output = 1;
}

message Input {
  string name = 1;
}

message Output {
  string welcome = 1;
}

service Basic {
  option (tools.generator.v1alpha.capability) = {
    mode: MODE_DON
    capability_id: "basic-test-action-trigger@1.0.0"
  };
  rpc Action(Input) returns (Output);
  rpc Trigger(Config) returns (stream TriggerEvent);
}
`

const internalBasicactionV1BasicActionEmbedded = `syntax = "proto3";

package capabilities.internal.basicaction.v1;

import "tools/generator/v1alpha/cre_metadata.proto";

message Inputs {
  bool input_thing = 1;
}

message Outputs {
  string adapted_thing = 1;
}

// This action server for testing purposes only.
service BasicAction { // This comment tests the generator's ability to handle comments.
  option (tools.generator.v1alpha.capability) = {
    mode: MODE_DON
    capability_id: "basic-test-action@1.0.0"
  };
  // This comment tests the generator's ability to handle leading comments on methods.
  rpc PerformAction(Inputs) returns (Outputs); // This comment tests the generator's ability to handle trailing comments on methods.
}
`

const internalBasictriggerV1BasicTriggerEmbedded = `syntax = "proto3";

package capabilities.internal.basictrigger.v1;

import "tools/generator/v1alpha/cre_metadata.proto";

message Config {
  string name = 1;
  int32 number = 2;
}

message Outputs {
  string cool_output = 1;
}

service Basic {
  option (tools.generator.v1alpha.capability) = {
    mode: MODE_DON
    capability_id: "basic-test-trigger@1.0.0"
  };
  rpc Trigger(Config) returns (stream Outputs);
}
`

const internalConsensusV1alphaConsensusEmbedded = `syntax = "proto3";

package capabilities.internal.consensus.v1alpha;

import "sdk/v1alpha/sdk.proto";
import "tools/generator/v1alpha/cre_metadata.proto";
import "values/v1/values.proto";

service Consensus {
  option (tools.generator.v1alpha.capability) = {
    mode: MODE_DON
    capability_id: "consensus@1.0.0-alpha"
  };
  rpc Simple(sdk.v1alpha.SimpleConsensusInputs) returns (values.v1.Value);
  rpc Report(sdk.v1alpha.ReportRequest) returns (sdk.v1alpha.ReportResponse);
}
`

const internalImportclashP1V1ImportEmbedded = `syntax = "proto3";

package capabilities.internal.importclash.p1.v1;

message Item {
  bool input_thing = 1;
}
`

const internalImportclashP2V1ImportEmbedded = `syntax = "proto3";

package capabilities.internal.importclash.p2.v1;

message Item {
  string adapted_thing = 1;
}
`

const internalImportclashV1ClashEmbedded = `syntax = "proto3";

package capabilities.internal.importclash.v1;

import "capabilities/internal/importclash/p1/v1/import.proto";
import "capabilities/internal/importclash/p2/v1/import.proto";
import "tools/generator/v1alpha/cre_metadata.proto";

service BasicAction {
  option (tools.generator.v1alpha.capability) = {
    mode: MODE_DON
    capability_id: "import-clash@1.0.0"
  };
  rpc PerformAction(capabilities.internal.importclash.p1.v1.Item) returns (capabilities.internal.importclash.p2.v1.Item);
}
`

const internalNodeactionV1NodeActionEmbedded = `syntax = "proto3";

package capabilities.internal.nodeaction.v1;

import "tools/generator/v1alpha/cre_metadata.proto";

message NodeInputs {
  bool input_thing = 1;
}

message NodeOutputs {
  int32 output_thing = 1;
}

service BasicAction {
  option (tools.generator.v1alpha.capability) = {
    mode: MODE_NODE
    capability_id: "basic-test-node-action@1.0.0"
  };
  rpc PerformAction(NodeInputs) returns (NodeOutputs);
}
`

const networkingHttpV1alphaClientEmbedded = `syntax = "proto3";

package capabilities.networking.http.v1alpha;

import "tools/generator/v1alpha/cre_metadata.proto";

// CacheSettings defines cache control options for outbound HTTP requests.
message CacheSettings {
  bool read_from_cache = 1; // If true, attempt to read a cached response for the request.
  int32 max_age_ms = 2; // Maximum age of a cached response in milliseconds.
}

message Request {
  string url = 1;
  string method = 2;
  map<string, string> headers = 3;
  bytes body = 4;
  int32 timeout_ms = 5;
  CacheSettings cache_settings = 6;
}

message Response {
  uint32 status_code = 1;
  map<string, string> headers = 2;
  bytes body = 3;
}

service Client {
  option (tools.generator.v1alpha.capability) = {
    mode: MODE_NODE
    capability_id: "http-actions@1.0.0-alpha"
  };
  rpc SendRequest(Request) returns (Response);
}
`

const networkingHttpV1alphaTriggerEmbedded = `syntax = "proto3";

package capabilities.networking.http.v1alpha;

import "tools/generator/v1alpha/cre_metadata.proto";

message Config {
  // Public keys against which the signature of incoming requests are validated
  repeated AuthorizedKey authorized_keys = 1;
}

message Payload {
  // JSON input in the HTTP trigger request (as bytes)
  bytes input = 1;

  // Key used to sign the HTTP trigger request
  AuthorizedKey key = 2;
}

enum KeyType {
  KEY_TYPE_UNSPECIFIED = 0;
  KEY_TYPE_ECDSA_EVM = 1;
}

// Generic and extensible authorized signer abstraction
message AuthorizedKey {
  KeyType type = 1;
  string public_key = 2;
}

service HTTP {
  option (tools.generator.v1alpha.capability) = {
    mode: MODE_DON
    capability_id: "http-trigger@1.0.0-alpha"
  };

  rpc Trigger(Config) returns (stream Payload);
}
`

const schedulerCronV1TriggerEmbedded = `syntax = "proto3";

package capabilities.scheduler.cron.v1;

import "google/protobuf/timestamp.proto";
import "tools/generator/v1alpha/cre_metadata.proto";

message Config {
  string schedule = 1; // Cron schedule string
}

message Payload {
  google.protobuf.Timestamp scheduled_execution_time = 1;
}

message LegacyPayload {
  option deprecated = true;
  string scheduled_execution_time = 1; // Time that cron trigger's task execution had been scheduled to occur (RFC3339Nano formatted)
}

service Cron {
  option (tools.generator.v1alpha.capability) = {
    mode: MODE_DON
    capability_id: "cron-trigger@1.0.0"
  };

  rpc Trigger(Config) returns (stream Payload);

  rpc LegacyTrigger(Config) returns (stream LegacyPayload) {
    option (tools.generator.v1alpha.method) = {map_to_untyped_api: true};
    option deprecated = true;
  }
}
`

const v1alphaSdkEmbedded = `syntax = "proto3";

package sdk.v1alpha;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "values/v1/values.proto";

enum AggregationType {
  AGGREGATION_TYPE_UNSPECIFIED = 0;
  AGGREGATION_TYPE_MEDIAN = 1;
  AGGREGATION_TYPE_IDENTICAL = 2;
  AGGREGATION_TYPE_COMMON_PREFIX = 3;
  AGGREGATION_TYPE_COMMON_SUFFIX = 4;
}

message SimpleConsensusInputs {
  oneof observation {
    values.v1.Value value = 1;
    string error = 2;
  }
  ConsensusDescriptor descriptors = 3;
  values.v1.Value default = 4;
}

message FieldsMap {
  map<string, ConsensusDescriptor> fields = 1;
}

message ConsensusDescriptor {
  oneof descriptor {
    AggregationType aggregation = 1;
    FieldsMap fields_map = 2;
  }
}

message ReportRequest {
  bytes encoded_payload = 1;
  string encoder_name = 2;
  string signing_algo = 3;
  string hashing_algo = 4;
}

message ReportResponse {
  bytes config_digest = 1;
  uint64 seq_nr = 2;
  bytes report_context = 3; // combination of seq_nr and config_digest
  bytes raw_report = 4;
  repeated AttributedSignature sigs = 5;
}

message AttributedSignature {
  bytes signature = 1;
  uint32 signer_id = 2;
}

message CapabilityRequest {
  string id = 1;
  google.protobuf.Any payload = 2;
  string method = 3;
  int32 callback_id = 4;
}

message CapabilityResponse {
  oneof response {
    google.protobuf.Any payload = 1;
    string error = 2;
  }
}

enum Mode {
  MODE_UNSPECIFIED = 0;
  MODE_DON = 1;
  MODE_NODE = 2;
}

message TriggerSubscription {
  string id = 1;
  google.protobuf.Any payload = 2;
  string method = 3;
}

message TriggerSubscriptionRequest {
  repeated TriggerSubscription subscriptions = 1;
}

message Trigger {
  uint64 id = 1;
  google.protobuf.Any payload = 2;
}

message AwaitCapabilitiesRequest {
  repeated int32 ids = 1;
}

message AwaitCapabilitiesResponse {
  map<int32, CapabilityResponse> responses = 1;
}
message ExecuteRequest {
  bytes config = 1;
  oneof request {
    google.protobuf.Empty subscribe = 2;
    Trigger trigger = 3;
  }
  uint64 max_response_size = 4;
}

message ExecutionResult {
  oneof result {
    values.v1.Value value = 1;
    string error = 2;
    TriggerSubscriptionRequest trigger_subscriptions = 3;
  }
}

message GetSecretsRequest {
  repeated SecretRequest requests = 1;
  int32 callback_id = 2;
}

message AwaitSecretsRequest {
  repeated int32 ids = 1;
}

message AwaitSecretsResponse {
  map<int32, SecretResponses> responses = 1;
}

message SecretRequest {
  string id = 1;
  string namespace = 2;
}

message Secret {
  string id = 1;
  string namespace = 2;
  string owner = 3;
  string value = 4;
}

message SecretError {
  string id = 1;
  string namespace = 2;
  string owner = 3;
  string error = 4;
}

message SecretResponse {
  oneof response {
    Secret secret = 1;
    SecretError error = 2;
  }
}

message SecretResponses {
  repeated SecretResponse responses = 1;
}
`

const generatorV1alphaCreMetadataEmbedded = `syntax = "proto3";

package tools.generator.v1alpha;

import "google/protobuf/descriptor.proto";
import "sdk/v1alpha/sdk.proto";

message StringLabel {
  map<string, string> defaults = 1;
}

message Uint64Label {
  map<string, uint64> defaults = 1;
}

message Uint32Label {
  map<string, uint32> defaults = 1;
}

message Int64Label {
  map<string, int64> defaults = 1;
}

message Int32Label {
  map<string, int32> defaults = 1;
}

message Label {
  oneof kind {
    StringLabel string_label = 1;
    Uint64Label uint64_label = 2;
    Int64Label int64_label = 3;
    Uint32Label uint32_label = 4;
    Int32Label int32_label = 5;
  }
}

message CapabilityMetadata {
  sdk.v1alpha.Mode mode = 1;
  string capability_id = 2;
  map<string, Label> labels = 3;
}

extend google.protobuf.ServiceOptions {
  CapabilityMetadata capability = 50000; // 50000-99999 is the range for custom options.
}

message CapabilityMethodMetadata {
  bool map_to_untyped_api = 1;
}

extend google.protobuf.MethodOptions {
  CapabilityMethodMetadata method = 50001; // 50000-99999 is the range for custom options.
}
`

const v1ValuesEmbedded = `syntax = "proto3";

package values.v1;

import "google/protobuf/timestamp.proto";

message Value {
  reserved 8;
  oneof value {
    string string_value = 1;
    bool bool_value = 2;
    bytes bytes_value = 3;
    Map map_value = 4;
    List list_value = 5;
    Decimal decimal_value = 6;
    int64 int64_value = 7;
    BigInt bigint_value = 9;
    google.protobuf.Timestamp time_value = 10;
    double float64_value = 11;
    uint64 uint64_value = 12;
  }
}

message BigInt {
  bytes abs_val = 1;
  int64 sign = 2;
}

message Map {
  map<string, Value> fields = 1;
}

message List {
  repeated Value fields = 2;
}

message Decimal {
  BigInt coefficient = 1;
  int32 exponent = 2;
}
`

var allFiles = []*embeddedFile{
	{
		name:    "capabilities/blockchain/evm/v1alpha/client.proto",
		content: blockchainEvmV1alphaClientEmbedded,
	},
	{
		name:    "capabilities/internal/actionandtrigger/v1/action_and_trigger.proto",
		content: internalActionandtriggerV1ActionAndTriggerEmbedded,
	},
	{
		name:    "capabilities/internal/basicaction/v1/basic_action.proto",
		content: internalBasicactionV1BasicActionEmbedded,
	},
	{
		name:    "capabilities/internal/basictrigger/v1/basic_trigger.proto",
		content: internalBasictriggerV1BasicTriggerEmbedded,
	},
	{
		name:    "capabilities/internal/consensus/v1alpha/consensus.proto",
		content: internalConsensusV1alphaConsensusEmbedded,
	},
	{
		name:    "capabilities/internal/importclash/p1/v1/import.proto",
		content: internalImportclashP1V1ImportEmbedded,
	},
	{
		name:    "capabilities/internal/importclash/p2/v1/import.proto",
		content: internalImportclashP2V1ImportEmbedded,
	},
	{
		name:    "capabilities/internal/importclash/v1/clash.proto",
		content: internalImportclashV1ClashEmbedded,
	},
	{
		name:    "capabilities/internal/nodeaction/v1/node_action.proto",
		content: internalNodeactionV1NodeActionEmbedded,
	},
	{
		name:    "capabilities/networking/http/v1alpha/client.proto",
		content: networkingHttpV1alphaClientEmbedded,
	},
	{
		name:    "capabilities/networking/http/v1alpha/trigger.proto",
		content: networkingHttpV1alphaTriggerEmbedded,
	},
	{
		name:    "capabilities/scheduler/cron/v1/trigger.proto",
		content: schedulerCronV1TriggerEmbedded,
	},
	{
		name:    "sdk/v1alpha/sdk.proto",
		content: v1alphaSdkEmbedded,
	},
	{
		name:    "tools/generator/v1alpha/cre_metadata.proto",
		content: generatorV1alphaCreMetadataEmbedded,
	},
	{
		name:    "values/v1/values.proto",
		content: v1ValuesEmbedded,
	},
}
