syntax = "proto3";
package creditreservation.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "workflows/v1/metering.proto";

option go_package = "github.com/smartcontractkit/chainlink-protos/billing/go;billing";

// ResourceType corresponds to billing.unit_type in Postgres.
enum ResourceType {
  // Unknown / unset.
  RESOURCE_TYPE_UNSPECIFIED = 0;
  // Consensus bandwidth.
  RESOURCE_TYPE_CONSENSUS = 1;
  // Compute time in milliseconds.
  RESOURCE_TYPE_COMPUTE = 2;
  // Gas cost.
  RESOURCE_TYPE_GAS = 3;
  // HTTP bandwidth.
  RESOURCE_TYPE_NETWORK = 4;
  // Trigger operations count.
  RESOURCE_TYPE_TRIGGERS = 5;
}

// .MeasurementUnit_MEASUREMENT_UNIT corresponds to billing.measurement_unit in Postgres.
enum MeasurementUnit {
  // Unknown / unset.
  MEASUREMENT_UNIT_UNSPECIFIED = 0;
  // Bytes (CONSENSUS).
  MEASUREMENT_UNIT_BYTES = 1;
  // Milliseconds (COMPUTE).
  MEASUREMENT_UNIT_MILLISECONDS = 2;
  // Operations count (ALERTS, EVENTS, CHAIN_CALLS, TRIGGERS).
  MEASUREMENT_UNIT_OPERATIONS = 3;
  // Cost (GAS).
  MEASUREMENT_UNIT_COST = 4;
}

// Organization’s credit balances.
message OrganizationCredits {
  string credits = 1;
  string credits_reserved = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
}

// Request by workflow to look up org credits.
message GetOrganizationCreditsByWorkflowRequest {
  string workflow_owner = 1;
  string workflow_registry_address = 2;
  uint64 registry_chain_selector = 3;
}

// Response carrying org ID and credits.
message GetOrganizationCreditsByWorkflowResponse {
  string organization_id = 1;
  OrganizationCredits credits = 2;
}

// Reserve credits for a workflow execution.
message ReserveCreditsRequest {
  string workflow_owner = 1;
  string workflow_registry_address = 2;
  uint64 registry_chain_selector = 3;
  string workflow_id = 4;
  string workflow_execution_id = 5;
  float credits = 6;
}

message ReserveCreditsResponse {
  string organization_id = 1;
  bool success = 2;
  float credits = 3;
  repeated RateCardEntry entries = 4;
}

// Submit a workflow receipt.
message SubmitWorkflowReceiptRequest {
  string workflow_owner = 1;
  string workflow_registry_address = 2;
  uint64 registry_chain_selector = 3;
  string workflow_id = 4;
  string workflow_execution_id = 5;
  workflows.v1.MeteringReport metering = 6;
  boolean meteringMode = 7;
  string meteringModeErr = 8;
}

// -----------------------------------------------------------------------------
// MESSAGES
// -----------------------------------------------------------------------------

// A single rate‐card entry.
message RateCardEntry {
  ResourceType resource_type = 1;
  MeasurementUnit measurement_unit = 2;
  string units_per_credit = 3;
  string changed_by = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

// Get the default, global rate card (all resource types).
message GetRateCardRequest {
  string workflow_owner = 1;
  string workflow_registry_address = 2;
  uint64 chain_selector = 3;
}
message GetRateCardResponse {
  repeated RateCardEntry entries = 1;
}

// Service for reserving and querying credits.
service CreditReservationService {
  rpc GetOrganizationCreditsByWorkflow(GetOrganizationCreditsByWorkflowRequest) returns (GetOrganizationCreditsByWorkflowResponse);

  rpc ReserveCredits(ReserveCreditsRequest) returns (ReserveCreditsResponse);

  rpc SubmitWorkflowReceipt(SubmitWorkflowReceiptRequest) returns (google.protobuf.Empty);

  rpc GetRateCard(GetRateCardRequest) returns (GetRateCardResponse);
}
