// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: creditreservation/v1alpha/credit_reservation_service.proto

package billing

import (
	events "github.com/smartcontractkit/chainlink-protos/workflows/go/events"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ResourceType corresponds to billing.resource_type in Postgres.
type ResourceType int32

const (
	// Unknown / unset.
	ResourceType_RESOURCE_TYPE_UNSPECIFIED ResourceType = 0
	// Consensus bandwidth.
	ResourceType_RESOURCE_TYPE_CONSENSUS ResourceType = 1
	// Compute time in milliseconds.
	ResourceType_RESOURCE_TYPE_COMPUTE ResourceType = 2
	// HTTP bandwidth.
	ResourceType_RESOURCE_TYPE_NETWORK ResourceType = 4
	// Trigger operations count.
	ResourceType_RESOURCE_TYPE_TRIGGERS ResourceType = 5
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "RESOURCE_TYPE_CONSENSUS",
		2: "RESOURCE_TYPE_COMPUTE",
		4: "RESOURCE_TYPE_NETWORK",
		5: "RESOURCE_TYPE_TRIGGERS",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED": 0,
		"RESOURCE_TYPE_CONSENSUS":   1,
		"RESOURCE_TYPE_COMPUTE":     2,
		"RESOURCE_TYPE_NETWORK":     4,
		"RESOURCE_TYPE_TRIGGERS":    5,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_enumTypes[0].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_creditreservation_v1alpha_credit_reservation_service_proto_enumTypes[0]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{0}
}

// MeasurementUnit corresponds to billing.measurement_unit in Postgres.
type MeasurementUnit int32

const (
	// Unknown / unset.
	MeasurementUnit_MEASUREMENT_UNIT_UNSPECIFIED MeasurementUnit = 0
	// Bytes (CONSENSUS).
	MeasurementUnit_MEASUREMENT_UNIT_BYTES MeasurementUnit = 2
	// Milliseconds (COMPUTE).
	MeasurementUnit_MEASUREMENT_UNIT_MILLISECONDS MeasurementUnit = 3
	// Operations count (ALERTS, EVENTS, CHAIN_CALLS, TRIGGERS).
	MeasurementUnit_MEASUREMENT_UNIT_OPERATIONS MeasurementUnit = 4
	// Cost (GAS).
	MeasurementUnit_MEASUREMENT_UNIT_COST MeasurementUnit = 5
)

// Enum value maps for MeasurementUnit.
var (
	MeasurementUnit_name = map[int32]string{
		0: "MEASUREMENT_UNIT_UNSPECIFIED",
		2: "MEASUREMENT_UNIT_BYTES",
		3: "MEASUREMENT_UNIT_MILLISECONDS",
		4: "MEASUREMENT_UNIT_OPERATIONS",
		5: "MEASUREMENT_UNIT_COST",
	}
	MeasurementUnit_value = map[string]int32{
		"MEASUREMENT_UNIT_UNSPECIFIED":  0,
		"MEASUREMENT_UNIT_BYTES":        2,
		"MEASUREMENT_UNIT_MILLISECONDS": 3,
		"MEASUREMENT_UNIT_OPERATIONS":   4,
		"MEASUREMENT_UNIT_COST":         5,
	}
)

func (x MeasurementUnit) Enum() *MeasurementUnit {
	p := new(MeasurementUnit)
	*p = x
	return p
}

func (x MeasurementUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasurementUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_enumTypes[1].Descriptor()
}

func (MeasurementUnit) Type() protoreflect.EnumType {
	return &file_creditreservation_v1alpha_credit_reservation_service_proto_enumTypes[1]
}

func (x MeasurementUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasurementUnit.Descriptor instead.
func (MeasurementUnit) EnumDescriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{1}
}

// CallType signifies the two billing service calls with aggregation
type CallType int32

const (
	CallType_RESERVE_CREDITS  CallType = 0
	CallType_WORKFLOW_RECEIPT CallType = 1
)

// Enum value maps for CallType.
var (
	CallType_name = map[int32]string{
		0: "RESERVE_CREDITS",
		1: "WORKFLOW_RECEIPT",
	}
	CallType_value = map[string]int32{
		"RESERVE_CREDITS":  0,
		"WORKFLOW_RECEIPT": 1,
	}
)

func (x CallType) Enum() *CallType {
	p := new(CallType)
	*p = x
	return p
}

func (x CallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallType) Descriptor() protoreflect.EnumDescriptor {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_enumTypes[2].Descriptor()
}

func (CallType) Type() protoreflect.EnumType {
	return &file_creditreservation_v1alpha_credit_reservation_service_proto_enumTypes[2]
}

func (x CallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallType.Descriptor instead.
func (CallType) EnumDescriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{2}
}

// AggregationStatus reflects the two possible states of aggregation
type AggregationStatus int32

const (
	AggregationStatus_COLLECTING      AggregationStatus = 0
	AggregationStatus_AGGREGATION_MET AggregationStatus = 1
)

// Enum value maps for AggregationStatus.
var (
	AggregationStatus_name = map[int32]string{
		0: "COLLECTING",
		1: "AGGREGATION_MET",
	}
	AggregationStatus_value = map[string]int32{
		"COLLECTING":      0,
		"AGGREGATION_MET": 1,
	}
)

func (x AggregationStatus) Enum() *AggregationStatus {
	p := new(AggregationStatus)
	*p = x
	return p
}

func (x AggregationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_enumTypes[3].Descriptor()
}

func (AggregationStatus) Type() protoreflect.EnumType {
	return &file_creditreservation_v1alpha_credit_reservation_service_proto_enumTypes[3]
}

func (x AggregationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationStatus.Descriptor instead.
func (AggregationStatus) EnumDescriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{3}
}

// AggregationOutcome reflects the two possible outcomes of aggregation
type AggregationOutcome int32

const (
	AggregationOutcome_SUCCESS AggregationOutcome = 0
	AggregationOutcome_FAILURE AggregationOutcome = 1
)

// Enum value maps for AggregationOutcome.
var (
	AggregationOutcome_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
	}
	AggregationOutcome_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
	}
)

func (x AggregationOutcome) Enum() *AggregationOutcome {
	p := new(AggregationOutcome)
	*p = x
	return p
}

func (x AggregationOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_enumTypes[4].Descriptor()
}

func (AggregationOutcome) Type() protoreflect.EnumType {
	return &file_creditreservation_v1alpha_credit_reservation_service_proto_enumTypes[4]
}

func (x AggregationOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationOutcome.Descriptor instead.
func (AggregationOutcome) EnumDescriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{4}
}

// Organization’s credit balances.
type OrganizationCredits struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Credits         string                 `protobuf:"bytes,1,opt,name=credits,proto3" json:"credits,omitempty"`
	CreditsReserved string                 `protobuf:"bytes,2,opt,name=credits_reserved,json=creditsReserved,proto3" json:"credits_reserved,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *OrganizationCredits) Reset() {
	*x = OrganizationCredits{}
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrganizationCredits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationCredits) ProtoMessage() {}

func (x *OrganizationCredits) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationCredits.ProtoReflect.Descriptor instead.
func (*OrganizationCredits) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{0}
}

func (x *OrganizationCredits) GetCredits() string {
	if x != nil {
		return x.Credits
	}
	return ""
}

func (x *OrganizationCredits) GetCreditsReserved() string {
	if x != nil {
		return x.CreditsReserved
	}
	return ""
}

func (x *OrganizationCredits) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrganizationCredits) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Request by workflow to look up org credits.
type GetOrganizationCreditsByWorkflowRequest struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowOwner                 string                 `protobuf:"bytes,1,opt,name=workflow_owner,json=workflowOwner,proto3" json:"workflow_owner,omitempty"`
	WorkflowRegistryAddress       string                 `protobuf:"bytes,2,opt,name=workflow_registry_address,json=workflowRegistryAddress,proto3" json:"workflow_registry_address,omitempty"`
	WorkflowRegistryChainSelector uint64                 `protobuf:"varint,3,opt,name=workflow_registry_chain_selector,json=workflowRegistryChainSelector,proto3" json:"workflow_registry_chain_selector,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *GetOrganizationCreditsByWorkflowRequest) Reset() {
	*x = GetOrganizationCreditsByWorkflowRequest{}
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationCreditsByWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationCreditsByWorkflowRequest) ProtoMessage() {}

func (x *GetOrganizationCreditsByWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationCreditsByWorkflowRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationCreditsByWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetOrganizationCreditsByWorkflowRequest) GetWorkflowOwner() string {
	if x != nil {
		return x.WorkflowOwner
	}
	return ""
}

func (x *GetOrganizationCreditsByWorkflowRequest) GetWorkflowRegistryAddress() string {
	if x != nil {
		return x.WorkflowRegistryAddress
	}
	return ""
}

func (x *GetOrganizationCreditsByWorkflowRequest) GetWorkflowRegistryChainSelector() uint64 {
	if x != nil {
		return x.WorkflowRegistryChainSelector
	}
	return 0
}

// Response carrying org ID and credits.
type GetOrganizationCreditsByWorkflowResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Credits        *OrganizationCredits   `protobuf:"bytes,2,opt,name=credits,proto3" json:"credits,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetOrganizationCreditsByWorkflowResponse) Reset() {
	*x = GetOrganizationCreditsByWorkflowResponse{}
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationCreditsByWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationCreditsByWorkflowResponse) ProtoMessage() {}

func (x *GetOrganizationCreditsByWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationCreditsByWorkflowResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationCreditsByWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetOrganizationCreditsByWorkflowResponse) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetOrganizationCreditsByWorkflowResponse) GetCredits() *OrganizationCredits {
	if x != nil {
		return x.Credits
	}
	return nil
}

// Reserve credits for a workflow execution.
type ReserveCreditsRequest struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowOwner                 string                 `protobuf:"bytes,1,opt,name=workflow_owner,json=workflowOwner,proto3" json:"workflow_owner,omitempty"`
	WorkflowRegistryAddress       string                 `protobuf:"bytes,2,opt,name=workflow_registry_address,json=workflowRegistryAddress,proto3" json:"workflow_registry_address,omitempty"`
	WorkflowRegistryChainSelector uint64                 `protobuf:"varint,3,opt,name=workflow_registry_chain_selector,json=workflowRegistryChainSelector,proto3" json:"workflow_registry_chain_selector,omitempty"`
	WorkflowId                    string                 `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowExecutionId           string                 `protobuf:"bytes,5,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
	Credits                       *string                `protobuf:"bytes,6,opt,name=credits,proto3,oneof" json:"credits,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *ReserveCreditsRequest) Reset() {
	*x = ReserveCreditsRequest{}
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveCreditsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveCreditsRequest) ProtoMessage() {}

func (x *ReserveCreditsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveCreditsRequest.ProtoReflect.Descriptor instead.
func (*ReserveCreditsRequest) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{3}
}

func (x *ReserveCreditsRequest) GetWorkflowOwner() string {
	if x != nil {
		return x.WorkflowOwner
	}
	return ""
}

func (x *ReserveCreditsRequest) GetWorkflowRegistryAddress() string {
	if x != nil {
		return x.WorkflowRegistryAddress
	}
	return ""
}

func (x *ReserveCreditsRequest) GetWorkflowRegistryChainSelector() uint64 {
	if x != nil {
		return x.WorkflowRegistryChainSelector
	}
	return 0
}

func (x *ReserveCreditsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ReserveCreditsRequest) GetWorkflowExecutionId() string {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return ""
}

func (x *ReserveCreditsRequest) GetCredits() string {
	if x != nil && x.Credits != nil {
		return *x.Credits
	}
	return ""
}

type ReserveCreditsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Success        bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Credits        string                 `protobuf:"bytes,3,opt,name=credits,proto3" json:"credits,omitempty"`
	RateCards      []*RateCard            `protobuf:"bytes,4,rep,name=rate_cards,json=rateCards,proto3" json:"rate_cards,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReserveCreditsResponse) Reset() {
	*x = ReserveCreditsResponse{}
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveCreditsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveCreditsResponse) ProtoMessage() {}

func (x *ReserveCreditsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveCreditsResponse.ProtoReflect.Descriptor instead.
func (*ReserveCreditsResponse) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{4}
}

func (x *ReserveCreditsResponse) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ReserveCreditsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReserveCreditsResponse) GetCredits() string {
	if x != nil {
		return x.Credits
	}
	return ""
}

func (x *ReserveCreditsResponse) GetRateCards() []*RateCard {
	if x != nil {
		return x.RateCards
	}
	return nil
}

// Submit a workflow receipt.
type SubmitWorkflowReceiptRequest struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowOwner                 string                 `protobuf:"bytes,1,opt,name=workflow_owner,json=workflowOwner,proto3" json:"workflow_owner,omitempty"`
	WorkflowRegistryAddress       string                 `protobuf:"bytes,2,opt,name=workflow_registry_address,json=workflowRegistryAddress,proto3" json:"workflow_registry_address,omitempty"`
	WorkflowRegistryChainSelector uint64                 `protobuf:"varint,3,opt,name=workflow_registry_chain_selector,json=workflowRegistryChainSelector,proto3" json:"workflow_registry_chain_selector,omitempty"`
	WorkflowId                    string                 `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowExecutionId           string                 `protobuf:"bytes,5,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
	Metering                      *events.MeteringReport `protobuf:"bytes,6,opt,name=metering,proto3" json:"metering,omitempty"`
	CreditsConsumed               string                 `protobuf:"bytes,7,opt,name=credits_consumed,json=creditsConsumed,proto3" json:"credits_consumed,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *SubmitWorkflowReceiptRequest) Reset() {
	*x = SubmitWorkflowReceiptRequest{}
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitWorkflowReceiptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitWorkflowReceiptRequest) ProtoMessage() {}

func (x *SubmitWorkflowReceiptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitWorkflowReceiptRequest.ProtoReflect.Descriptor instead.
func (*SubmitWorkflowReceiptRequest) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{5}
}

func (x *SubmitWorkflowReceiptRequest) GetWorkflowOwner() string {
	if x != nil {
		return x.WorkflowOwner
	}
	return ""
}

func (x *SubmitWorkflowReceiptRequest) GetWorkflowRegistryAddress() string {
	if x != nil {
		return x.WorkflowRegistryAddress
	}
	return ""
}

func (x *SubmitWorkflowReceiptRequest) GetWorkflowRegistryChainSelector() uint64 {
	if x != nil {
		return x.WorkflowRegistryChainSelector
	}
	return 0
}

func (x *SubmitWorkflowReceiptRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *SubmitWorkflowReceiptRequest) GetWorkflowExecutionId() string {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return ""
}

func (x *SubmitWorkflowReceiptRequest) GetMetering() *events.MeteringReport {
	if x != nil {
		return x.Metering
	}
	return nil
}

func (x *SubmitWorkflowReceiptRequest) GetCreditsConsumed() string {
	if x != nil {
		return x.CreditsConsumed
	}
	return ""
}

// A single rate‐card entry.
type RateCard struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ResourceType    ResourceType           `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=creditreservation.v1alpha.ResourceType" json:"resource_type,omitempty"`
	MeasurementUnit MeasurementUnit        `protobuf:"varint,2,opt,name=measurement_unit,json=measurementUnit,proto3,enum=creditreservation.v1alpha.MeasurementUnit" json:"measurement_unit,omitempty"`
	UnitsPerCredit  string                 `protobuf:"bytes,3,opt,name=units_per_credit,json=unitsPerCredit,proto3" json:"units_per_credit,omitempty"`
	ChangedBy       string                 `protobuf:"bytes,4,opt,name=changed_by,json=changedBy,proto3" json:"changed_by,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RateCard) Reset() {
	*x = RateCard{}
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateCard) ProtoMessage() {}

func (x *RateCard) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateCard.ProtoReflect.Descriptor instead.
func (*RateCard) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{6}
}

func (x *RateCard) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_RESOURCE_TYPE_UNSPECIFIED
}

func (x *RateCard) GetMeasurementUnit() MeasurementUnit {
	if x != nil {
		return x.MeasurementUnit
	}
	return MeasurementUnit_MEASUREMENT_UNIT_UNSPECIFIED
}

func (x *RateCard) GetUnitsPerCredit() string {
	if x != nil {
		return x.UnitsPerCredit
	}
	return ""
}

func (x *RateCard) GetChangedBy() string {
	if x != nil {
		return x.ChangedBy
	}
	return ""
}

func (x *RateCard) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RateCard) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Get the default, global rate card (all resource types).
type GetWorkflowExecutionRatesRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	WorkflowOwner           string                 `protobuf:"bytes,1,opt,name=workflow_owner,json=workflowOwner,proto3" json:"workflow_owner,omitempty"`
	WorkflowRegistryAddress string                 `protobuf:"bytes,2,opt,name=workflow_registry_address,json=workflowRegistryAddress,proto3" json:"workflow_registry_address,omitempty"`
	ChainSelector           uint64                 `protobuf:"varint,3,opt,name=chain_selector,json=chainSelector,proto3" json:"chain_selector,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetWorkflowExecutionRatesRequest) Reset() {
	*x = GetWorkflowExecutionRatesRequest{}
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkflowExecutionRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowExecutionRatesRequest) ProtoMessage() {}

func (x *GetWorkflowExecutionRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowExecutionRatesRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowExecutionRatesRequest) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetWorkflowExecutionRatesRequest) GetWorkflowOwner() string {
	if x != nil {
		return x.WorkflowOwner
	}
	return ""
}

func (x *GetWorkflowExecutionRatesRequest) GetWorkflowRegistryAddress() string {
	if x != nil {
		return x.WorkflowRegistryAddress
	}
	return ""
}

func (x *GetWorkflowExecutionRatesRequest) GetChainSelector() uint64 {
	if x != nil {
		return x.ChainSelector
	}
	return 0
}

type GetWorkflowExecutionRatesResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	RateCards      []*RateCard            `protobuf:"bytes,2,rep,name=rate_cards,json=rateCards,proto3" json:"rate_cards,omitempty"`
	// chain selector -> gas tokens per credit
	GasTokensPerCredit map[uint64]string `protobuf:"bytes,3,rep,name=gas_tokens_per_credit,json=gasTokensPerCredit,proto3" json:"gas_tokens_per_credit,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetWorkflowExecutionRatesResponse) Reset() {
	*x = GetWorkflowExecutionRatesResponse{}
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkflowExecutionRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowExecutionRatesResponse) ProtoMessage() {}

func (x *GetWorkflowExecutionRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowExecutionRatesResponse.ProtoReflect.Descriptor instead.
func (*GetWorkflowExecutionRatesResponse) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetWorkflowExecutionRatesResponse) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetWorkflowExecutionRatesResponse) GetRateCards() []*RateCard {
	if x != nil {
		return x.RateCards
	}
	return nil
}

func (x *GetWorkflowExecutionRatesResponse) GetGasTokensPerCredit() map[uint64]string {
	if x != nil {
		return x.GasTokensPerCredit
	}
	return nil
}

type CheckAggregationStatusRequest struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId                    string                 `protobuf:"bytes,1,opt,name=WorkflowId,proto3" json:"WorkflowId,omitempty"`
	WorkflowExecutionId           string                 `protobuf:"bytes,2,opt,name=WorkflowExecutionId,proto3" json:"WorkflowExecutionId,omitempty"`
	WorkflowRegistryChainSelector uint64                 `protobuf:"varint,3,opt,name=WorkflowRegistryChainSelector,proto3" json:"WorkflowRegistryChainSelector,omitempty"`
	CallType                      CallType               `protobuf:"varint,4,opt,name=CallType,proto3,enum=creditreservation.v1alpha.CallType" json:"CallType,omitempty"` // RESERVE_CREDITS, WORKFLOW_RECEIPT
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *CheckAggregationStatusRequest) Reset() {
	*x = CheckAggregationStatusRequest{}
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckAggregationStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAggregationStatusRequest) ProtoMessage() {}

func (x *CheckAggregationStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAggregationStatusRequest.ProtoReflect.Descriptor instead.
func (*CheckAggregationStatusRequest) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{9}
}

func (x *CheckAggregationStatusRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *CheckAggregationStatusRequest) GetWorkflowExecutionId() string {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return ""
}

func (x *CheckAggregationStatusRequest) GetWorkflowRegistryChainSelector() uint64 {
	if x != nil {
		return x.WorkflowRegistryChainSelector
	}
	return 0
}

func (x *CheckAggregationStatusRequest) GetCallType() CallType {
	if x != nil {
		return x.CallType
	}
	return CallType_RESERVE_CREDITS
}

type CheckAggregationStatusResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	NOracles          uint64                 `protobuf:"varint,1,opt,name=NOracles,proto3" json:"NOracles,omitempty"`                                                                    // Number of oracles participating
	FFault            uint64                 `protobuf:"varint,2,opt,name=FFault,proto3" json:"FFault,omitempty"`                                                                        // 3*f + 1 <= n
	QuorumThreshold   uint64                 `protobuf:"varint,3,opt,name=QuorumThreshold,proto3" json:"QuorumThreshold,omitempty"`                                                      // e.g. 2*f + 1
	ReportsReceived   uint64                 `protobuf:"varint,4,opt,name=ReportsReceived,proto3" json:"ReportsReceived,omitempty"`                                                      // current number of submitted reserve and reports
	AggregationStatus AggregationStatus      `protobuf:"varint,5,opt,name=AggregationStatus,proto3,enum=creditreservation.v1alpha.AggregationStatus" json:"AggregationStatus,omitempty"` // COLLECTING, AGGREGATION_MET
	Outcome           AggregationOutcome     `protobuf:"varint,6,opt,name=Outcome,proto3,enum=creditreservation.v1alpha.AggregationOutcome" json:"Outcome,omitempty"`                    // SUCCESS, FAILURE
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CheckAggregationStatusResponse) Reset() {
	*x = CheckAggregationStatusResponse{}
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckAggregationStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAggregationStatusResponse) ProtoMessage() {}

func (x *CheckAggregationStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAggregationStatusResponse.ProtoReflect.Descriptor instead.
func (*CheckAggregationStatusResponse) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP(), []int{10}
}

func (x *CheckAggregationStatusResponse) GetNOracles() uint64 {
	if x != nil {
		return x.NOracles
	}
	return 0
}

func (x *CheckAggregationStatusResponse) GetFFault() uint64 {
	if x != nil {
		return x.FFault
	}
	return 0
}

func (x *CheckAggregationStatusResponse) GetQuorumThreshold() uint64 {
	if x != nil {
		return x.QuorumThreshold
	}
	return 0
}

func (x *CheckAggregationStatusResponse) GetReportsReceived() uint64 {
	if x != nil {
		return x.ReportsReceived
	}
	return 0
}

func (x *CheckAggregationStatusResponse) GetAggregationStatus() AggregationStatus {
	if x != nil {
		return x.AggregationStatus
	}
	return AggregationStatus_COLLECTING
}

func (x *CheckAggregationStatusResponse) GetOutcome() AggregationOutcome {
	if x != nil {
		return x.Outcome
	}
	return AggregationOutcome_SUCCESS
}

var File_creditreservation_v1alpha_credit_reservation_service_proto protoreflect.FileDescriptor

var file_creditreservation_v1alpha_credit_reservation_service_proto_rawDesc = string([]byte{
	0x0a, 0x3a, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd0, 0x01, 0x0a, 0x13, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x42, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x9d, 0x01,
	0x0a, 0x28, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x42, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0xc3, 0x02,
	0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22,
	0x84, 0x03, 0x0a, 0x1c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x22, 0xee, 0x02, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x4c, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x55, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xe1, 0x02, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x15, 0x67, 0x61,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x50, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x67, 0x61, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x1a, 0x45, 0x0a, 0x17, 0x47, 0x61, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x50, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x01, 0x0a, 0x1d, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x44,
	0x0a, 0x1d, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x61, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xcd, 0x02, 0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4e, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x46, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x5a, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x07,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x2a, 0x9c, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x53, 0x10, 0x05, 0x2a, 0xae, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x41, 0x53,
	0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45,
	0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x41,
	0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45,
	0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43,
	0x4f, 0x53, 0x54, 0x10, 0x05, 0x2a, 0x35, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x5f, 0x43, 0x52, 0x45,
	0x44, 0x49, 0x54, 0x53, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x10, 0x01, 0x2a, 0x38, 0x0a, 0x11,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x45, 0x54, 0x10, 0x01, 0x2a, 0x2e, 0x0a, 0x12, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x32, 0xd2, 0x05, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x42, 0x79,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x42, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x42, 0x79, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x42,
	0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x75, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x12, 0x37, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x96, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x3b, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x16,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x41, 0x5a, 0x3f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2f, 0x67, 0x6f, 0x3b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescOnce sync.Once
	file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescData []byte
)

func file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescGZIP() []byte {
	file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescOnce.Do(func() {
		file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_creditreservation_v1alpha_credit_reservation_service_proto_rawDesc), len(file_creditreservation_v1alpha_credit_reservation_service_proto_rawDesc)))
	})
	return file_creditreservation_v1alpha_credit_reservation_service_proto_rawDescData
}

var file_creditreservation_v1alpha_credit_reservation_service_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_creditreservation_v1alpha_credit_reservation_service_proto_goTypes = []any{
	(ResourceType)(0),                                // 0: creditreservation.v1alpha.ResourceType
	(MeasurementUnit)(0),                             // 1: creditreservation.v1alpha.MeasurementUnit
	(CallType)(0),                                    // 2: creditreservation.v1alpha.CallType
	(AggregationStatus)(0),                           // 3: creditreservation.v1alpha.AggregationStatus
	(AggregationOutcome)(0),                          // 4: creditreservation.v1alpha.AggregationOutcome
	(*OrganizationCredits)(nil),                      // 5: creditreservation.v1alpha.OrganizationCredits
	(*GetOrganizationCreditsByWorkflowRequest)(nil),  // 6: creditreservation.v1alpha.GetOrganizationCreditsByWorkflowRequest
	(*GetOrganizationCreditsByWorkflowResponse)(nil), // 7: creditreservation.v1alpha.GetOrganizationCreditsByWorkflowResponse
	(*ReserveCreditsRequest)(nil),                    // 8: creditreservation.v1alpha.ReserveCreditsRequest
	(*ReserveCreditsResponse)(nil),                   // 9: creditreservation.v1alpha.ReserveCreditsResponse
	(*SubmitWorkflowReceiptRequest)(nil),             // 10: creditreservation.v1alpha.SubmitWorkflowReceiptRequest
	(*RateCard)(nil),                                 // 11: creditreservation.v1alpha.RateCard
	(*GetWorkflowExecutionRatesRequest)(nil),         // 12: creditreservation.v1alpha.GetWorkflowExecutionRatesRequest
	(*GetWorkflowExecutionRatesResponse)(nil),        // 13: creditreservation.v1alpha.GetWorkflowExecutionRatesResponse
	(*CheckAggregationStatusRequest)(nil),            // 14: creditreservation.v1alpha.CheckAggregationStatusRequest
	(*CheckAggregationStatusResponse)(nil),           // 15: creditreservation.v1alpha.CheckAggregationStatusResponse
	nil,                                              // 16: creditreservation.v1alpha.GetWorkflowExecutionRatesResponse.GasTokensPerCreditEntry
	(*timestamppb.Timestamp)(nil),                    // 17: google.protobuf.Timestamp
	(*events.MeteringReport)(nil),                    // 18: workflows.v1.MeteringReport
	(*emptypb.Empty)(nil),                            // 19: google.protobuf.Empty
}
var file_creditreservation_v1alpha_credit_reservation_service_proto_depIdxs = []int32{
	17, // 0: creditreservation.v1alpha.OrganizationCredits.created_at:type_name -> google.protobuf.Timestamp
	17, // 1: creditreservation.v1alpha.OrganizationCredits.updated_at:type_name -> google.protobuf.Timestamp
	5,  // 2: creditreservation.v1alpha.GetOrganizationCreditsByWorkflowResponse.credits:type_name -> creditreservation.v1alpha.OrganizationCredits
	11, // 3: creditreservation.v1alpha.ReserveCreditsResponse.rate_cards:type_name -> creditreservation.v1alpha.RateCard
	18, // 4: creditreservation.v1alpha.SubmitWorkflowReceiptRequest.metering:type_name -> workflows.v1.MeteringReport
	0,  // 5: creditreservation.v1alpha.RateCard.resource_type:type_name -> creditreservation.v1alpha.ResourceType
	1,  // 6: creditreservation.v1alpha.RateCard.measurement_unit:type_name -> creditreservation.v1alpha.MeasurementUnit
	17, // 7: creditreservation.v1alpha.RateCard.created_at:type_name -> google.protobuf.Timestamp
	17, // 8: creditreservation.v1alpha.RateCard.updated_at:type_name -> google.protobuf.Timestamp
	11, // 9: creditreservation.v1alpha.GetWorkflowExecutionRatesResponse.rate_cards:type_name -> creditreservation.v1alpha.RateCard
	16, // 10: creditreservation.v1alpha.GetWorkflowExecutionRatesResponse.gas_tokens_per_credit:type_name -> creditreservation.v1alpha.GetWorkflowExecutionRatesResponse.GasTokensPerCreditEntry
	2,  // 11: creditreservation.v1alpha.CheckAggregationStatusRequest.CallType:type_name -> creditreservation.v1alpha.CallType
	3,  // 12: creditreservation.v1alpha.CheckAggregationStatusResponse.AggregationStatus:type_name -> creditreservation.v1alpha.AggregationStatus
	4,  // 13: creditreservation.v1alpha.CheckAggregationStatusResponse.Outcome:type_name -> creditreservation.v1alpha.AggregationOutcome
	6,  // 14: creditreservation.v1alpha.CreditReservationService.GetOrganizationCreditsByWorkflow:input_type -> creditreservation.v1alpha.GetOrganizationCreditsByWorkflowRequest
	8,  // 15: creditreservation.v1alpha.CreditReservationService.ReserveCredits:input_type -> creditreservation.v1alpha.ReserveCreditsRequest
	10, // 16: creditreservation.v1alpha.CreditReservationService.SubmitWorkflowReceipt:input_type -> creditreservation.v1alpha.SubmitWorkflowReceiptRequest
	12, // 17: creditreservation.v1alpha.CreditReservationService.GetWorkflowExecutionRates:input_type -> creditreservation.v1alpha.GetWorkflowExecutionRatesRequest
	14, // 18: creditreservation.v1alpha.CreditReservationService.CheckAggregationStatus:input_type -> creditreservation.v1alpha.CheckAggregationStatusRequest
	7,  // 19: creditreservation.v1alpha.CreditReservationService.GetOrganizationCreditsByWorkflow:output_type -> creditreservation.v1alpha.GetOrganizationCreditsByWorkflowResponse
	9,  // 20: creditreservation.v1alpha.CreditReservationService.ReserveCredits:output_type -> creditreservation.v1alpha.ReserveCreditsResponse
	19, // 21: creditreservation.v1alpha.CreditReservationService.SubmitWorkflowReceipt:output_type -> google.protobuf.Empty
	13, // 22: creditreservation.v1alpha.CreditReservationService.GetWorkflowExecutionRates:output_type -> creditreservation.v1alpha.GetWorkflowExecutionRatesResponse
	15, // 23: creditreservation.v1alpha.CreditReservationService.CheckAggregationStatus:output_type -> creditreservation.v1alpha.CheckAggregationStatusResponse
	19, // [19:24] is the sub-list for method output_type
	14, // [14:19] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_creditreservation_v1alpha_credit_reservation_service_proto_init() }
func file_creditreservation_v1alpha_credit_reservation_service_proto_init() {
	if File_creditreservation_v1alpha_credit_reservation_service_proto != nil {
		return
	}
	file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_creditreservation_v1alpha_credit_reservation_service_proto_rawDesc), len(file_creditreservation_v1alpha_credit_reservation_service_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_creditreservation_v1alpha_credit_reservation_service_proto_goTypes,
		DependencyIndexes: file_creditreservation_v1alpha_credit_reservation_service_proto_depIdxs,
		EnumInfos:         file_creditreservation_v1alpha_credit_reservation_service_proto_enumTypes,
		MessageInfos:      file_creditreservation_v1alpha_credit_reservation_service_proto_msgTypes,
	}.Build()
	File_creditreservation_v1alpha_credit_reservation_service_proto = out.File
	file_creditreservation_v1alpha_credit_reservation_service_proto_goTypes = nil
	file_creditreservation_v1alpha_credit_reservation_service_proto_depIdxs = nil
}
