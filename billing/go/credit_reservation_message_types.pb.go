// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.3
// source: creditreservation/v1/credit_reservation_message_types.proto

package creditreservation

import (
	events "github.com/smartcontractkit/chainlink-protos/workflows/go/events"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// UnitType corresponds to billing.unit_type in Postgres.
type UnitType int32

const (
	// Unknown / unset.
	UnitType_UNIT_TYPE_UNSPECIFIED UnitType = 0
	// Workflow memory usage.
	UnitType_UNIT_TYPE_WF_MEMORY UnitType = 1
	// Consensus bandwidth.
	UnitType_UNIT_TYPE_CONSENSUS UnitType = 2
	// Compute time in milliseconds.
	UnitType_UNIT_TYPE_COMPUTE UnitType = 3
	// DON storage in megabyte-months.
	UnitType_UNIT_TYPE_DON_STORAGE UnitType = 4
	// Workflow storage in megabyte-months.
	UnitType_UNIT_TYPE_WF_STORAGE UnitType = 5
	// Alerts operations count.
	UnitType_UNIT_TYPE_ALERTS UnitType = 6
	// Gas cost.
	UnitType_UNIT_TYPE_GAS UnitType = 7
	// Event operations count.
	UnitType_UNIT_TYPE_EVENTS UnitType = 8
	// Chain call operations count.
	UnitType_UNIT_TYPE_CHAIN_CALLS UnitType = 9
	// Trigger operations count.
	UnitType_UNIT_TYPE_TRIGGERS UnitType = 10
)

// Enum value maps for UnitType.
var (
	UnitType_name = map[int32]string{
		0:  "UNIT_TYPE_UNSPECIFIED",
		1:  "UNIT_TYPE_WF_MEMORY",
		2:  "UNIT_TYPE_CONSENSUS",
		3:  "UNIT_TYPE_COMPUTE",
		4:  "UNIT_TYPE_DON_STORAGE",
		5:  "UNIT_TYPE_WF_STORAGE",
		6:  "UNIT_TYPE_ALERTS",
		7:  "UNIT_TYPE_GAS",
		8:  "UNIT_TYPE_EVENTS",
		9:  "UNIT_TYPE_CHAIN_CALLS",
		10: "UNIT_TYPE_TRIGGERS",
	}
	UnitType_value = map[string]int32{
		"UNIT_TYPE_UNSPECIFIED": 0,
		"UNIT_TYPE_WF_MEMORY":   1,
		"UNIT_TYPE_CONSENSUS":   2,
		"UNIT_TYPE_COMPUTE":     3,
		"UNIT_TYPE_DON_STORAGE": 4,
		"UNIT_TYPE_WF_STORAGE":  5,
		"UNIT_TYPE_ALERTS":      6,
		"UNIT_TYPE_GAS":         7,
		"UNIT_TYPE_EVENTS":      8,
		"UNIT_TYPE_CHAIN_CALLS": 9,
		"UNIT_TYPE_TRIGGERS":    10,
	}
)

func (x UnitType) Enum() *UnitType {
	p := new(UnitType)
	*p = x
	return p
}

func (x UnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_creditreservation_v1_credit_reservation_message_types_proto_enumTypes[0].Descriptor()
}

func (UnitType) Type() protoreflect.EnumType {
	return &file_creditreservation_v1_credit_reservation_message_types_proto_enumTypes[0]
}

func (x UnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitType.Descriptor instead.
func (UnitType) EnumDescriptor() ([]byte, []int) {
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP(), []int{0}
}

// .MeasurementUnit_MEASUREMENT_UNIT corresponds to billing.measurement_unit in Postgres.
type MeasurementUnit int32

const (
	// Unknown / unset.
	MeasurementUnit_MEASUREMENT_UNIT_UNSPECIFIED MeasurementUnit = 0
	// Megabyte-months (WF_MEMORY, DON_STORAGE, WF_STORAGE).
	MeasurementUnit_MEASUREMENT_UNIT_MEGABYTE_MONTHS MeasurementUnit = 1
	// Aggregate megabytes (CONSENSUS).
	MeasurementUnit_MEASUREMENT_UNIT_MEGABYTES_AGGREGATE MeasurementUnit = 2
	// Milliseconds (COMPUTE).
	MeasurementUnit_MEASUREMENT_UNIT_MILLISECONDS MeasurementUnit = 3
	// Operations count (ALERTS, EVENTS, CHAIN_CALLS, TRIGGERS).
	MeasurementUnit_MEASUREMENT_UNIT_OPERATIONS MeasurementUnit = 4
	// Cost (GAS).
	MeasurementUnit_MEASUREMENT_UNIT_COST MeasurementUnit = 5
)

// Enum value maps for MeasurementUnit.
var (
	MeasurementUnit_name = map[int32]string{
		0: "MEASUREMENT_UNIT_UNSPECIFIED",
		1: "MEASUREMENT_UNIT_MEGABYTE_MONTHS",
		2: "MEASUREMENT_UNIT_MEGABYTES_AGGREGATE",
		3: "MEASUREMENT_UNIT_MILLISECONDS",
		4: "MEASUREMENT_UNIT_OPERATIONS",
		5: "MEASUREMENT_UNIT_COST",
	}
	MeasurementUnit_value = map[string]int32{
		"MEASUREMENT_UNIT_UNSPECIFIED":         0,
		"MEASUREMENT_UNIT_MEGABYTE_MONTHS":     1,
		"MEASUREMENT_UNIT_MEGABYTES_AGGREGATE": 2,
		"MEASUREMENT_UNIT_MILLISECONDS":        3,
		"MEASUREMENT_UNIT_OPERATIONS":          4,
		"MEASUREMENT_UNIT_COST":                5,
	}
)

func (x MeasurementUnit) Enum() *MeasurementUnit {
	p := new(MeasurementUnit)
	*p = x
	return p
}

func (x MeasurementUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasurementUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_creditreservation_v1_credit_reservation_message_types_proto_enumTypes[1].Descriptor()
}

func (MeasurementUnit) Type() protoreflect.EnumType {
	return &file_creditreservation_v1_credit_reservation_message_types_proto_enumTypes[1]
}

func (x MeasurementUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasurementUnit.Descriptor instead.
func (MeasurementUnit) EnumDescriptor() ([]byte, []int) {
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP(), []int{1}
}

// Organization’s credit balances.
type OrganizationCredits struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Credits         float32                `protobuf:"fixed32,1,opt,name=credits,proto3" json:"credits,omitempty"`
	CreditsReserved float32                `protobuf:"fixed32,2,opt,name=credits_reserved,json=creditsReserved,proto3" json:"credits_reserved,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *OrganizationCredits) Reset() {
	*x = OrganizationCredits{}
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrganizationCredits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationCredits) ProtoMessage() {}

func (x *OrganizationCredits) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationCredits.ProtoReflect.Descriptor instead.
func (*OrganizationCredits) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP(), []int{0}
}

func (x *OrganizationCredits) GetCredits() float32 {
	if x != nil {
		return x.Credits
	}
	return 0
}

func (x *OrganizationCredits) GetCreditsReserved() float32 {
	if x != nil {
		return x.CreditsReserved
	}
	return 0
}

func (x *OrganizationCredits) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrganizationCredits) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Request by workflow to look up org credits.
type GetOrganizationCreditsByWorkflowRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	WorkflowOwner           string                 `protobuf:"bytes,1,opt,name=workflow_owner,json=workflowOwner,proto3" json:"workflow_owner,omitempty"`
	WorkflowRegistryAddress string                 `protobuf:"bytes,2,opt,name=workflow_registry_address,json=workflowRegistryAddress,proto3" json:"workflow_registry_address,omitempty"`
	ChainSelector           uint64                 `protobuf:"varint,3,opt,name=chain_selector,json=chainSelector,proto3" json:"chain_selector,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetOrganizationCreditsByWorkflowRequest) Reset() {
	*x = GetOrganizationCreditsByWorkflowRequest{}
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationCreditsByWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationCreditsByWorkflowRequest) ProtoMessage() {}

func (x *GetOrganizationCreditsByWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationCreditsByWorkflowRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationCreditsByWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP(), []int{1}
}

func (x *GetOrganizationCreditsByWorkflowRequest) GetWorkflowOwner() string {
	if x != nil {
		return x.WorkflowOwner
	}
	return ""
}

func (x *GetOrganizationCreditsByWorkflowRequest) GetWorkflowRegistryAddress() string {
	if x != nil {
		return x.WorkflowRegistryAddress
	}
	return ""
}

func (x *GetOrganizationCreditsByWorkflowRequest) GetChainSelector() uint64 {
	if x != nil {
		return x.ChainSelector
	}
	return 0
}

// Response carrying org ID and credits.
type GetOrganizationCreditsByWorkflowResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrganizationId string                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Credits        *OrganizationCredits   `protobuf:"bytes,2,opt,name=credits,proto3" json:"credits,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetOrganizationCreditsByWorkflowResponse) Reset() {
	*x = GetOrganizationCreditsByWorkflowResponse{}
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationCreditsByWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationCreditsByWorkflowResponse) ProtoMessage() {}

func (x *GetOrganizationCreditsByWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationCreditsByWorkflowResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationCreditsByWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP(), []int{2}
}

func (x *GetOrganizationCreditsByWorkflowResponse) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *GetOrganizationCreditsByWorkflowResponse) GetCredits() *OrganizationCredits {
	if x != nil {
		return x.Credits
	}
	return nil
}

// Reserve credits for a workflow execution.
type ReserveCreditsRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	WorkflowOwner           string                 `protobuf:"bytes,1,opt,name=workflow_owner,json=workflowOwner,proto3" json:"workflow_owner,omitempty"`
	WorkflowRegistryAddress string                 `protobuf:"bytes,2,opt,name=workflow_registry_address,json=workflowRegistryAddress,proto3" json:"workflow_registry_address,omitempty"`
	ChainSelector           uint64                 `protobuf:"varint,3,opt,name=chain_selector,json=chainSelector,proto3" json:"chain_selector,omitempty"`
	WorkflowId              string                 `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowExecutionId     string                 `protobuf:"bytes,5,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
	Credits                 float32                `protobuf:"fixed32,6,opt,name=credits,proto3" json:"credits,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ReserveCreditsRequest) Reset() {
	*x = ReserveCreditsRequest{}
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveCreditsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveCreditsRequest) ProtoMessage() {}

func (x *ReserveCreditsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveCreditsRequest.ProtoReflect.Descriptor instead.
func (*ReserveCreditsRequest) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP(), []int{3}
}

func (x *ReserveCreditsRequest) GetWorkflowOwner() string {
	if x != nil {
		return x.WorkflowOwner
	}
	return ""
}

func (x *ReserveCreditsRequest) GetWorkflowRegistryAddress() string {
	if x != nil {
		return x.WorkflowRegistryAddress
	}
	return ""
}

func (x *ReserveCreditsRequest) GetChainSelector() uint64 {
	if x != nil {
		return x.ChainSelector
	}
	return 0
}

func (x *ReserveCreditsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ReserveCreditsRequest) GetWorkflowExecutionId() string {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return ""
}

func (x *ReserveCreditsRequest) GetCredits() float32 {
	if x != nil {
		return x.Credits
	}
	return 0
}

type ReserveCreditsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*RateCardEntry       `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveCreditsResponse) Reset() {
	*x = ReserveCreditsResponse{}
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveCreditsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveCreditsResponse) ProtoMessage() {}

func (x *ReserveCreditsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveCreditsResponse.ProtoReflect.Descriptor instead.
func (*ReserveCreditsResponse) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP(), []int{4}
}

func (x *ReserveCreditsResponse) GetEntries() []*RateCardEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Release a previous reservation.
type ReleaseReservationRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	WorkflowOwner           string                 `protobuf:"bytes,1,opt,name=workflow_owner,json=workflowOwner,proto3" json:"workflow_owner,omitempty"`
	WorkflowRegistryAddress string                 `protobuf:"bytes,2,opt,name=workflow_registry_address,json=workflowRegistryAddress,proto3" json:"workflow_registry_address,omitempty"`
	ChainSelector           uint64                 `protobuf:"varint,3,opt,name=chain_selector,json=chainSelector,proto3" json:"chain_selector,omitempty"`
	WorkflowId              string                 `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowExecutionId     string                 `protobuf:"bytes,5,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ReleaseReservationRequest) Reset() {
	*x = ReleaseReservationRequest{}
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseReservationRequest) ProtoMessage() {}

func (x *ReleaseReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseReservationRequest.ProtoReflect.Descriptor instead.
func (*ReleaseReservationRequest) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP(), []int{5}
}

func (x *ReleaseReservationRequest) GetWorkflowOwner() string {
	if x != nil {
		return x.WorkflowOwner
	}
	return ""
}

func (x *ReleaseReservationRequest) GetWorkflowRegistryAddress() string {
	if x != nil {
		return x.WorkflowRegistryAddress
	}
	return ""
}

func (x *ReleaseReservationRequest) GetChainSelector() uint64 {
	if x != nil {
		return x.ChainSelector
	}
	return 0
}

func (x *ReleaseReservationRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ReleaseReservationRequest) GetWorkflowExecutionId() string {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return ""
}

// Consume a reservation.
type ConsumeReservationRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	WorkflowOwner           string                 `protobuf:"bytes,1,opt,name=workflow_owner,json=workflowOwner,proto3" json:"workflow_owner,omitempty"`
	WorkflowRegistryAddress string                 `protobuf:"bytes,2,opt,name=workflow_registry_address,json=workflowRegistryAddress,proto3" json:"workflow_registry_address,omitempty"`
	ChainSelector           uint64                 `protobuf:"varint,3,opt,name=chain_selector,json=chainSelector,proto3" json:"chain_selector,omitempty"`
	WorkflowId              string                 `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowExecutionId     string                 `protobuf:"bytes,5,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ConsumeReservationRequest) Reset() {
	*x = ConsumeReservationRequest{}
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumeReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeReservationRequest) ProtoMessage() {}

func (x *ConsumeReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeReservationRequest.ProtoReflect.Descriptor instead.
func (*ConsumeReservationRequest) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP(), []int{6}
}

func (x *ConsumeReservationRequest) GetWorkflowOwner() string {
	if x != nil {
		return x.WorkflowOwner
	}
	return ""
}

func (x *ConsumeReservationRequest) GetWorkflowRegistryAddress() string {
	if x != nil {
		return x.WorkflowRegistryAddress
	}
	return ""
}

func (x *ConsumeReservationRequest) GetChainSelector() uint64 {
	if x != nil {
		return x.ChainSelector
	}
	return 0
}

func (x *ConsumeReservationRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ConsumeReservationRequest) GetWorkflowExecutionId() string {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return ""
}

// Consume raw credits.
type ConsumeCreditsRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	WorkflowOwner           string                 `protobuf:"bytes,1,opt,name=workflow_owner,json=workflowOwner,proto3" json:"workflow_owner,omitempty"`
	WorkflowRegistryAddress string                 `protobuf:"bytes,2,opt,name=workflow_registry_address,json=workflowRegistryAddress,proto3" json:"workflow_registry_address,omitempty"`
	ChainSelector           uint64                 `protobuf:"varint,3,opt,name=chain_selector,json=chainSelector,proto3" json:"chain_selector,omitempty"`
	WorkflowId              string                 `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Credits                 float32                `protobuf:"fixed32,5,opt,name=credits,proto3" json:"credits,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ConsumeCreditsRequest) Reset() {
	*x = ConsumeCreditsRequest{}
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumeCreditsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeCreditsRequest) ProtoMessage() {}

func (x *ConsumeCreditsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeCreditsRequest.ProtoReflect.Descriptor instead.
func (*ConsumeCreditsRequest) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP(), []int{7}
}

func (x *ConsumeCreditsRequest) GetWorkflowOwner() string {
	if x != nil {
		return x.WorkflowOwner
	}
	return ""
}

func (x *ConsumeCreditsRequest) GetWorkflowRegistryAddress() string {
	if x != nil {
		return x.WorkflowRegistryAddress
	}
	return ""
}

func (x *ConsumeCreditsRequest) GetChainSelector() uint64 {
	if x != nil {
		return x.ChainSelector
	}
	return 0
}

func (x *ConsumeCreditsRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ConsumeCreditsRequest) GetCredits() float32 {
	if x != nil {
		return x.Credits
	}
	return 0
}

// Submit a workflow receipt.
type SubmitWorkflowReceiptRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	WorkflowOwner           string                 `protobuf:"bytes,1,opt,name=workflow_owner,json=workflowOwner,proto3" json:"workflow_owner,omitempty"`
	WorkflowRegistryAddress string                 `protobuf:"bytes,2,opt,name=workflow_registry_address,json=workflowRegistryAddress,proto3" json:"workflow_registry_address,omitempty"`
	ChainSelector           uint64                 `protobuf:"varint,3,opt,name=chain_selector,json=chainSelector,proto3" json:"chain_selector,omitempty"`
	WorkflowId              string                 `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowExecutionId     string                 `protobuf:"bytes,5,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
	Metering                *events.MeteringReport `protobuf:"bytes,6,opt,name=metering,proto3" json:"metering,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SubmitWorkflowReceiptRequest) Reset() {
	*x = SubmitWorkflowReceiptRequest{}
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitWorkflowReceiptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitWorkflowReceiptRequest) ProtoMessage() {}

func (x *SubmitWorkflowReceiptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitWorkflowReceiptRequest.ProtoReflect.Descriptor instead.
func (*SubmitWorkflowReceiptRequest) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP(), []int{8}
}

func (x *SubmitWorkflowReceiptRequest) GetWorkflowOwner() string {
	if x != nil {
		return x.WorkflowOwner
	}
	return ""
}

func (x *SubmitWorkflowReceiptRequest) GetWorkflowRegistryAddress() string {
	if x != nil {
		return x.WorkflowRegistryAddress
	}
	return ""
}

func (x *SubmitWorkflowReceiptRequest) GetChainSelector() uint64 {
	if x != nil {
		return x.ChainSelector
	}
	return 0
}

func (x *SubmitWorkflowReceiptRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *SubmitWorkflowReceiptRequest) GetWorkflowExecutionId() string {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return ""
}

func (x *SubmitWorkflowReceiptRequest) GetMetering() *events.MeteringReport {
	if x != nil {
		return x.Metering
	}
	return nil
}

// A single rate‐card entry.
type RateCardEntry struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UnitType        UnitType               `protobuf:"varint,1,opt,name=unit_type,json=unitType,proto3,enum=creditreservation.v1.UnitType" json:"unit_type,omitempty"`
	MeasurementUnit MeasurementUnit        `protobuf:"varint,2,opt,name=measurement_unit,json=measurementUnit,proto3,enum=creditreservation.v1.MeasurementUnit" json:"measurement_unit,omitempty"`
	UnitsPerCredit  float64                `protobuf:"fixed64,3,opt,name=units_per_credit,json=unitsPerCredit,proto3" json:"units_per_credit,omitempty"`
	ChangedBy       string                 `protobuf:"bytes,4,opt,name=changed_by,json=changedBy,proto3" json:"changed_by,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RateCardEntry) Reset() {
	*x = RateCardEntry{}
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateCardEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateCardEntry) ProtoMessage() {}

func (x *RateCardEntry) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateCardEntry.ProtoReflect.Descriptor instead.
func (*RateCardEntry) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP(), []int{9}
}

func (x *RateCardEntry) GetUnitType() UnitType {
	if x != nil {
		return x.UnitType
	}
	return UnitType_UNIT_TYPE_UNSPECIFIED
}

func (x *RateCardEntry) GetMeasurementUnit() MeasurementUnit {
	if x != nil {
		return x.MeasurementUnit
	}
	return MeasurementUnit_MEASUREMENT_UNIT_UNSPECIFIED
}

func (x *RateCardEntry) GetUnitsPerCredit() float64 {
	if x != nil {
		return x.UnitsPerCredit
	}
	return 0
}

func (x *RateCardEntry) GetChangedBy() string {
	if x != nil {
		return x.ChangedBy
	}
	return ""
}

func (x *RateCardEntry) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RateCardEntry) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Get the default, global rate card (all unit types).
type GetRateCardRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	WorkflowOwner           string                 `protobuf:"bytes,1,opt,name=workflow_owner,json=workflowOwner,proto3" json:"workflow_owner,omitempty"`
	WorkflowRegistryAddress string                 `protobuf:"bytes,2,opt,name=workflow_registry_address,json=workflowRegistryAddress,proto3" json:"workflow_registry_address,omitempty"`
	ChainSelector           uint64                 `protobuf:"varint,3,opt,name=chain_selector,json=chainSelector,proto3" json:"chain_selector,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetRateCardRequest) Reset() {
	*x = GetRateCardRequest{}
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRateCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateCardRequest) ProtoMessage() {}

func (x *GetRateCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateCardRequest.ProtoReflect.Descriptor instead.
func (*GetRateCardRequest) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP(), []int{10}
}

func (x *GetRateCardRequest) GetWorkflowOwner() string {
	if x != nil {
		return x.WorkflowOwner
	}
	return ""
}

func (x *GetRateCardRequest) GetWorkflowRegistryAddress() string {
	if x != nil {
		return x.WorkflowRegistryAddress
	}
	return ""
}

func (x *GetRateCardRequest) GetChainSelector() uint64 {
	if x != nil {
		return x.ChainSelector
	}
	return 0
}

type GetRateCardResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*RateCardEntry       `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRateCardResponse) Reset() {
	*x = GetRateCardResponse{}
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRateCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateCardResponse) ProtoMessage() {}

func (x *GetRateCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateCardResponse.ProtoReflect.Descriptor instead.
func (*GetRateCardResponse) Descriptor() ([]byte, []int) {
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP(), []int{11}
}

func (x *GetRateCardResponse) GetEntries() []*RateCardEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

var File_creditreservation_v1_credit_reservation_message_types_proto protoreflect.FileDescriptor

var file_creditreservation_v1_credit_reservation_message_types_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd0, 0x01, 0x0a, 0x13, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x42,
	0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x98, 0x01, 0x0a, 0x28, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x42, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0x57, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0xfa, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xfa,
	0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x1c, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0xdd, 0x02, 0x0a, 0x0d, 0x52, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x54, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2a, 0x95, 0x02, 0x0a, 0x08,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e,
	0x53, 0x55, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x46, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x53, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x41, 0x53, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x08,
	0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x53, 0x10, 0x0a, 0x2a, 0xe2, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x41, 0x53, 0x55,
	0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x41,
	0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x45,
	0x47, 0x41, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53, 0x10, 0x01, 0x12,
	0x28, 0x0a, 0x24, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x45, 0x47, 0x41, 0x42, 0x59, 0x54, 0x45, 0x53, 0x5f, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x45, 0x41,
	0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49,
	0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b,
	0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x05, 0x42, 0x4b, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2f, 0x67, 0x6f, 0x3b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_creditreservation_v1_credit_reservation_message_types_proto_rawDescOnce sync.Once
	file_creditreservation_v1_credit_reservation_message_types_proto_rawDescData = file_creditreservation_v1_credit_reservation_message_types_proto_rawDesc
)

func file_creditreservation_v1_credit_reservation_message_types_proto_rawDescGZIP() []byte {
	file_creditreservation_v1_credit_reservation_message_types_proto_rawDescOnce.Do(func() {
		file_creditreservation_v1_credit_reservation_message_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_creditreservation_v1_credit_reservation_message_types_proto_rawDescData)
	})
	return file_creditreservation_v1_credit_reservation_message_types_proto_rawDescData
}

var file_creditreservation_v1_credit_reservation_message_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_creditreservation_v1_credit_reservation_message_types_proto_goTypes = []any{
	(UnitType)(0),                                    // 0: creditreservation.v1.UnitType
	(MeasurementUnit)(0),                             // 1: creditreservation.v1.MeasurementUnit
	(*OrganizationCredits)(nil),                      // 2: creditreservation.v1.OrganizationCredits
	(*GetOrganizationCreditsByWorkflowRequest)(nil),  // 3: creditreservation.v1.GetOrganizationCreditsByWorkflowRequest
	(*GetOrganizationCreditsByWorkflowResponse)(nil), // 4: creditreservation.v1.GetOrganizationCreditsByWorkflowResponse
	(*ReserveCreditsRequest)(nil),                    // 5: creditreservation.v1.ReserveCreditsRequest
	(*ReserveCreditsResponse)(nil),                   // 6: creditreservation.v1.ReserveCreditsResponse
	(*ReleaseReservationRequest)(nil),                // 7: creditreservation.v1.ReleaseReservationRequest
	(*ConsumeReservationRequest)(nil),                // 8: creditreservation.v1.ConsumeReservationRequest
	(*ConsumeCreditsRequest)(nil),                    // 9: creditreservation.v1.ConsumeCreditsRequest
	(*SubmitWorkflowReceiptRequest)(nil),             // 10: creditreservation.v1.SubmitWorkflowReceiptRequest
	(*RateCardEntry)(nil),                            // 11: creditreservation.v1.RateCardEntry
	(*GetRateCardRequest)(nil),                       // 12: creditreservation.v1.GetRateCardRequest
	(*GetRateCardResponse)(nil),                      // 13: creditreservation.v1.GetRateCardResponse
	(*timestamppb.Timestamp)(nil),                    // 14: google.protobuf.Timestamp
	(*events.MeteringReport)(nil),                    // 15: workflows.v1.MeteringReport
}
var file_creditreservation_v1_credit_reservation_message_types_proto_depIdxs = []int32{
	14, // 0: creditreservation.v1.OrganizationCredits.created_at:type_name -> google.protobuf.Timestamp
	14, // 1: creditreservation.v1.OrganizationCredits.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 2: creditreservation.v1.GetOrganizationCreditsByWorkflowResponse.credits:type_name -> creditreservation.v1.OrganizationCredits
	11, // 3: creditreservation.v1.ReserveCreditsResponse.entries:type_name -> creditreservation.v1.RateCardEntry
	15, // 4: creditreservation.v1.SubmitWorkflowReceiptRequest.metering:type_name -> workflows.v1.MeteringReport
	0,  // 5: creditreservation.v1.RateCardEntry.unit_type:type_name -> creditreservation.v1.UnitType
	1,  // 6: creditreservation.v1.RateCardEntry.measurement_unit:type_name -> creditreservation.v1.MeasurementUnit
	14, // 7: creditreservation.v1.RateCardEntry.created_at:type_name -> google.protobuf.Timestamp
	14, // 8: creditreservation.v1.RateCardEntry.updated_at:type_name -> google.protobuf.Timestamp
	11, // 9: creditreservation.v1.GetRateCardResponse.entries:type_name -> creditreservation.v1.RateCardEntry
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_creditreservation_v1_credit_reservation_message_types_proto_init() }
func file_creditreservation_v1_credit_reservation_message_types_proto_init() {
	if File_creditreservation_v1_credit_reservation_message_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_creditreservation_v1_credit_reservation_message_types_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_creditreservation_v1_credit_reservation_message_types_proto_goTypes,
		DependencyIndexes: file_creditreservation_v1_credit_reservation_message_types_proto_depIdxs,
		EnumInfos:         file_creditreservation_v1_credit_reservation_message_types_proto_enumTypes,
		MessageInfos:      file_creditreservation_v1_credit_reservation_message_types_proto_msgTypes,
	}.Build()
	File_creditreservation_v1_credit_reservation_message_types_proto = out.File
	file_creditreservation_v1_credit_reservation_message_types_proto_rawDesc = nil
	file_creditreservation_v1_credit_reservation_message_types_proto_goTypes = nil
	file_creditreservation_v1_credit_reservation_message_types_proto_depIdxs = nil
}
