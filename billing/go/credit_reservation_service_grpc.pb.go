// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: creditreservation/v1alpha/credit_reservation_service.proto

package billing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CreditReservationService_GetOrganizationCreditsByWorkflow_FullMethodName = "/creditreservation.v1alpha.CreditReservationService/GetOrganizationCreditsByWorkflow"
	CreditReservationService_ReserveCredits_FullMethodName                   = "/creditreservation.v1alpha.CreditReservationService/ReserveCredits"
	CreditReservationService_SubmitWorkflowReceipt_FullMethodName            = "/creditreservation.v1alpha.CreditReservationService/SubmitWorkflowReceipt"
	CreditReservationService_GetWorkflowExecutionRates_FullMethodName        = "/creditreservation.v1alpha.CreditReservationService/GetWorkflowExecutionRates"
)

// CreditReservationServiceClient is the client API for CreditReservationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreditReservationServiceClient interface {
	GetOrganizationCreditsByWorkflow(ctx context.Context, in *GetOrganizationCreditsByWorkflowRequest, opts ...grpc.CallOption) (*GetOrganizationCreditsByWorkflowResponse, error)
	ReserveCredits(ctx context.Context, in *ReserveCreditsRequest, opts ...grpc.CallOption) (*ReserveCreditsResponse, error)
	SubmitWorkflowReceipt(ctx context.Context, in *SubmitWorkflowReceiptRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetWorkflowExecutionRates(ctx context.Context, in *GetWorkflowExecutionRatesRequest, opts ...grpc.CallOption) (*GetWorkflowExecutionRatesResponse, error)
}

type creditReservationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditReservationServiceClient(cc grpc.ClientConnInterface) CreditReservationServiceClient {
	return &creditReservationServiceClient{cc}
}

func (c *creditReservationServiceClient) GetOrganizationCreditsByWorkflow(ctx context.Context, in *GetOrganizationCreditsByWorkflowRequest, opts ...grpc.CallOption) (*GetOrganizationCreditsByWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationCreditsByWorkflowResponse)
	err := c.cc.Invoke(ctx, CreditReservationService_GetOrganizationCreditsByWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditReservationServiceClient) ReserveCredits(ctx context.Context, in *ReserveCreditsRequest, opts ...grpc.CallOption) (*ReserveCreditsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveCreditsResponse)
	err := c.cc.Invoke(ctx, CreditReservationService_ReserveCredits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditReservationServiceClient) SubmitWorkflowReceipt(ctx context.Context, in *SubmitWorkflowReceiptRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CreditReservationService_SubmitWorkflowReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditReservationServiceClient) GetWorkflowExecutionRates(ctx context.Context, in *GetWorkflowExecutionRatesRequest, opts ...grpc.CallOption) (*GetWorkflowExecutionRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkflowExecutionRatesResponse)
	err := c.cc.Invoke(ctx, CreditReservationService_GetWorkflowExecutionRates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditReservationServiceServer is the server API for CreditReservationService service.
// All implementations must embed UnimplementedCreditReservationServiceServer
// for forward compatibility.
type CreditReservationServiceServer interface {
	GetOrganizationCreditsByWorkflow(context.Context, *GetOrganizationCreditsByWorkflowRequest) (*GetOrganizationCreditsByWorkflowResponse, error)
	ReserveCredits(context.Context, *ReserveCreditsRequest) (*ReserveCreditsResponse, error)
	SubmitWorkflowReceipt(context.Context, *SubmitWorkflowReceiptRequest) (*emptypb.Empty, error)
	GetWorkflowExecutionRates(context.Context, *GetWorkflowExecutionRatesRequest) (*GetWorkflowExecutionRatesResponse, error)
	mustEmbedUnimplementedCreditReservationServiceServer()
}

// UnimplementedCreditReservationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCreditReservationServiceServer struct{}

func (UnimplementedCreditReservationServiceServer) GetOrganizationCreditsByWorkflow(context.Context, *GetOrganizationCreditsByWorkflowRequest) (*GetOrganizationCreditsByWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationCreditsByWorkflow not implemented")
}
func (UnimplementedCreditReservationServiceServer) ReserveCredits(context.Context, *ReserveCreditsRequest) (*ReserveCreditsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveCredits not implemented")
}
func (UnimplementedCreditReservationServiceServer) SubmitWorkflowReceipt(context.Context, *SubmitWorkflowReceiptRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWorkflowReceipt not implemented")
}
func (UnimplementedCreditReservationServiceServer) GetWorkflowExecutionRates(context.Context, *GetWorkflowExecutionRatesRequest) (*GetWorkflowExecutionRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowExecutionRates not implemented")
}
func (UnimplementedCreditReservationServiceServer) mustEmbedUnimplementedCreditReservationServiceServer() {
}
func (UnimplementedCreditReservationServiceServer) testEmbeddedByValue() {}

// UnsafeCreditReservationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreditReservationServiceServer will
// result in compilation errors.
type UnsafeCreditReservationServiceServer interface {
	mustEmbedUnimplementedCreditReservationServiceServer()
}

func RegisterCreditReservationServiceServer(s grpc.ServiceRegistrar, srv CreditReservationServiceServer) {
	// If the following call pancis, it indicates UnimplementedCreditReservationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CreditReservationService_ServiceDesc, srv)
}

func _CreditReservationService_GetOrganizationCreditsByWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationCreditsByWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditReservationServiceServer).GetOrganizationCreditsByWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditReservationService_GetOrganizationCreditsByWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditReservationServiceServer).GetOrganizationCreditsByWorkflow(ctx, req.(*GetOrganizationCreditsByWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditReservationService_ReserveCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveCreditsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditReservationServiceServer).ReserveCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditReservationService_ReserveCredits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditReservationServiceServer).ReserveCredits(ctx, req.(*ReserveCreditsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditReservationService_SubmitWorkflowReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitWorkflowReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditReservationServiceServer).SubmitWorkflowReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditReservationService_SubmitWorkflowReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditReservationServiceServer).SubmitWorkflowReceipt(ctx, req.(*SubmitWorkflowReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditReservationService_GetWorkflowExecutionRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowExecutionRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditReservationServiceServer).GetWorkflowExecutionRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditReservationService_GetWorkflowExecutionRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditReservationServiceServer).GetWorkflowExecutionRates(ctx, req.(*GetWorkflowExecutionRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreditReservationService_ServiceDesc is the grpc.ServiceDesc for CreditReservationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreditReservationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "creditreservation.v1alpha.CreditReservationService",
	HandlerType: (*CreditReservationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrganizationCreditsByWorkflow",
			Handler:    _CreditReservationService_GetOrganizationCreditsByWorkflow_Handler,
		},
		{
			MethodName: "ReserveCredits",
			Handler:    _CreditReservationService_ReserveCredits_Handler,
		},
		{
			MethodName: "SubmitWorkflowReceipt",
			Handler:    _CreditReservationService_SubmitWorkflowReceipt_Handler,
		},
		{
			MethodName: "GetWorkflowExecutionRates",
			Handler:    _CreditReservationService_GetWorkflowExecutionRates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "creditreservation/v1alpha/credit_reservation_service.proto",
}
