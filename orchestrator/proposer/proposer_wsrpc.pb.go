// Code generated by protoc-gen-go-wsrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-wsrpc v0.0.1
// - protoc             v5.28.1

package proposer

import (
	context "context"
	wsrpc "github.com/smartcontractkit/wsrpc"
)

// JobDistributorClient is the client API for JobDistributor service.
type JobDistributorClient interface {
	ApprovedJob(ctx context.Context, in *ApprovedJobRequest) (*ApprovedJobResponse, error)
	Healthcheck(ctx context.Context, in *HealthcheckRequest) (*HealthcheckResponse, error)
	UpdateNode(ctx context.Context, in *UpdateNodeRequest) (*UpdateNodeResponse, error)
	RejectedJob(ctx context.Context, in *RejectedJobRequest) (*RejectedJobResponse, error)
	CancelledJob(ctx context.Context, in *CancelledJobRequest) (*CancelledJobResponse, error)
}

type jobDistributorClient struct {
	cc wsrpc.ClientInterface
}

func NewJobDistributorClient(cc wsrpc.ClientInterface) JobDistributorClient {
	return &jobDistributorClient{cc}
}

func (c *jobDistributorClient) ApprovedJob(ctx context.Context, in *ApprovedJobRequest) (*ApprovedJobResponse, error) {
	out := new(ApprovedJobResponse)
	err := c.cc.Invoke(ctx, "ApprovedJob", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobDistributorClient) Healthcheck(ctx context.Context, in *HealthcheckRequest) (*HealthcheckResponse, error) {
	out := new(HealthcheckResponse)
	err := c.cc.Invoke(ctx, "Healthcheck", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobDistributorClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest) (*UpdateNodeResponse, error) {
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, "UpdateNode", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobDistributorClient) RejectedJob(ctx context.Context, in *RejectedJobRequest) (*RejectedJobResponse, error) {
	out := new(RejectedJobResponse)
	err := c.cc.Invoke(ctx, "RejectedJob", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobDistributorClient) CancelledJob(ctx context.Context, in *CancelledJobRequest) (*CancelledJobResponse, error) {
	out := new(CancelledJobResponse)
	err := c.cc.Invoke(ctx, "CancelledJob", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobDistributorServer is the server API for JobDistributor service.
type JobDistributorServer interface {
	ApprovedJob(context.Context, *ApprovedJobRequest) (*ApprovedJobResponse, error)
	Healthcheck(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error)
	UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error)
	RejectedJob(context.Context, *RejectedJobRequest) (*RejectedJobResponse, error)
	CancelledJob(context.Context, *CancelledJobRequest) (*CancelledJobResponse, error)
}

func RegisterJobDistributorServer(s wsrpc.ServiceRegistrar, srv JobDistributorServer) {
	s.RegisterService(&JobDistributor_ServiceDesc, srv)
}

func _JobDistributor_ApprovedJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ApprovedJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(JobDistributorServer).ApprovedJob(ctx, in)
}

func _JobDistributor_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(HealthcheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(JobDistributorServer).Healthcheck(ctx, in)
}

func _JobDistributor_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(JobDistributorServer).UpdateNode(ctx, in)
}

func _JobDistributor_RejectedJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RejectedJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(JobDistributorServer).RejectedJob(ctx, in)
}

func _JobDistributor_CancelledJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CancelledJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(JobDistributorServer).CancelledJob(ctx, in)
}

// JobDistributor_ServiceDesc is the wsrpc.ServiceDesc for JobDistributor service.
// It's only intended for direct use with wsrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobDistributor_ServiceDesc = wsrpc.ServiceDesc{
	ServiceName: "proposer.JobDistributor",
	HandlerType: (*JobDistributorServer)(nil),
	Methods: []wsrpc.MethodDesc{
		{
			MethodName: "ApprovedJob",
			Handler:    _JobDistributor_ApprovedJob_Handler,
		},
		{
			MethodName: "Healthcheck",
			Handler:    _JobDistributor_Healthcheck_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _JobDistributor_UpdateNode_Handler,
		},
		{
			MethodName: "RejectedJob",
			Handler:    _JobDistributor_RejectedJob_Handler,
		},
		{
			MethodName: "CancelledJob",
			Handler:    _JobDistributor_CancelledJob_Handler,
		},
	},
}
