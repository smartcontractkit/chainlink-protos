syntax = "proto3";

package cfm;

option go_package = "github.com/smartcontractkit/chainlink-protos/orchestrator/feedsmanager";

import "google/protobuf/timestamp.proto";

// RPC methods that the node will call on the JD.
service FeedsManager {
  rpc ApprovedJob(ApprovedJobRequest) returns (ApprovedJobResponse);
  rpc Healthcheck(HealthcheckRequest) returns (HealthcheckResponse);
  rpc UpdateNode(UpdateNodeRequest) returns (UpdateNodeResponse);
  rpc RejectedJob(RejectedJobRequest) returns (RejectedJobResponse);
  rpc CancelledJob(CancelledJobRequest) returns (CancelledJobResponse);
  rpc TransferedJob(TransferedJobRequest) returns (TransferedJobResponse);
}

// Defines the allowed job types
enum JobType {
  JOB_TYPE_UNSPECIFIED = 0;
  JOB_TYPE_FLUX_MONITOR = 1;
  JOB_TYPE_OCR = 2;
  JOB_TYPE_OCR2 = 3;
}

enum ChainType {
  CHAIN_TYPE_UNSPECIFIED = 0;
  CHAIN_TYPE_EVM = 1;
  CHAIN_TYPE_SOLANA = 2;
  CHAIN_TYPE_STARKNET = 3;
  CHAIN_TYPE_APTOS = 4;
  CHAIN_TYPE_TRON = 5;
  CHAIN_TYPE_TON = 6;
  CHAIN_TYPE_SUI = 7;
}

message Chain {
  string id = 1;
  ChainType type = 2;
}

// An account on a specific blockchain
message Account {
  ChainType chain_type = 1;
  string chain_id = 2;
  string address = 3;
}

// The config for Flux Monitor on a specific chain
message FluxMonitorConfig {
  bool enabled = 1;
}

// The config for OCR1 on a specific chain
message OCR1Config {
  message P2PKeyBundle {
    string peer_id = 1;
    string public_key = 2;
  }

  message OCRKeyBundle {
    string bundle_id = 1;
    string config_public_key = 2;
    string offchain_public_key = 3;
    string onchain_signing_address = 4;
  }

  bool enabled = 1;
  bool is_bootstrap = 2;
  P2PKeyBundle p2p_key_bundle = 3;
  OCRKeyBundle ocr_key_bundle = 4;
  string multiaddr = 5;
}

// The config for OCR2 on a specific chain
message OCR2Config {
  message P2PKeyBundle {
    string peer_id = 1;
    string public_key = 2;
  }

  message OCRKeyBundle {
    string bundle_id = 1;
    string config_public_key = 2;
    string offchain_public_key = 3;
    string onchain_signing_address = 4;
  }

  message Plugins {
    bool commit = 1;
    bool execute = 2;
    bool median = 3;
    bool mercury = 4;
    bool rebalancer = 5;
  }

  bool enabled = 1;
  bool is_bootstrap = 2;
  P2PKeyBundle p2p_key_bundle = 3;
  OCRKeyBundle ocr_key_bundle = 4;
  string multiaddr = 5;
  Plugins plugins = 6;
  optional string forwarder_address = 7;
}

message ChainConfig {
  Chain chain = 1;
  string account_address = 2;
  string admin_address = 3;
  FluxMonitorConfig flux_monitor_config = 4;
  OCR1Config ocr1_config = 5;
  OCR2Config ocr2_config = 6;
  // For EVM chains, we do not need this value and it is kept in the node's
  // keystore. For starknet, because the wallet address needs to be deployed
  // using this value and this pub key needs to be passed into the starknet
  // relayer, we request the node to send this directly to CLO.
  optional string account_address_public_key = 7;
}

message UpdateNodeRequest {
  repeated JobType job_types = 1;
  int64 chain_id = 2; // To be removed when all nodes are upgraded to 1.2
  repeated string account_addresses = 3;
  bool is_bootstrap_peer = 4;
  string bootstrap_multiaddr = 5;
  string version = 6;
  repeated int64 chain_ids = 7;
  repeated Account accounts = 8;
  repeated Chain chains = 9;

  repeated ChainConfig chain_configs = 10;
  optional string workflow_key = 11;
  repeated P2PKeyBundle p2p_key_bundles = 12;
  string nop_friendly_name = 13;

}
message UpdateNodeResponse {
  map<string, ChainConfigError> chain_config_errors = 1;
}
message ChainConfigError {
  string message = 1;
}

message ApprovedJobRequest {
  string uuid = 1;
  int64 version = 2;
}
message ApprovedJobResponse {}

message HealthcheckRequest {}
message HealthcheckResponse {}

message RejectedJobRequest {
  string uuid = 1;
  int64 version = 2;
}
message RejectedJobResponse {}

message CancelledJobRequest {
  string uuid = 1;
  int64 version = 2;
}
message CancelledJobResponse {}


message TransferJobRequest {
  string id = 1;                        // Remote UUID of the job to transfer
  string source_manager_pub_key = 2;    // Public key of the source feeds manager
  repeated Label labels = 3; // Set of labels associated with the job.

}

message TransferJobResponse {
  string id = 1;
}


// RPC methods that the FMS will call on the node.
service NodeService {
  // ProposeJob is called by the JD to propose a job to the node.
  rpc ProposeJob(ProposeJobRequest) returns (ProposeJobResponse);
  // DeleteJob is called by the JD to delete a job from the node.
  rpc DeleteJob(DeleteJobRequest) returns (DeleteJobResponse);
  // RevokeJob is called by the JD to revoke a job from the node.
  rpc RevokeJob(RevokeJobRequest) returns (RevokeJobResponse);

  rpc TransferJob(TransferJobRequest) returns (TransferJobResponse);
}

message ProposeJobRequest {
  string id = 1;
  string spec = 2;
  repeated string multiaddrs = 3;
  int64 version = 4;
}
message ProposeJobResponse {
  string id = 2;
}

message DeleteJobRequest {
  string id = 1;
}
message DeleteJobResponse {
  string id = 1;
}

message RevokeJobRequest {
  string id = 1;
}
message RevokeJobResponse {
  string id = 1;
}

message P2PKeyBundle {
  string peer_id = 1;
  string public_key = 2;
}

enum ProposalStatus {
  PROPOSAL_STATUS_UNSPECIFIED = 0;
  PROPOSAL_STATUS_PENDING = 1;
  PROPOSAL_STATUS_APPROVED = 2;
  PROPOSAL_STATUS_REJECTED = 3;
  PROPOSAL_STATUS_CANCELLED = 4;
  PROPOSAL_STATUS_REVOKED = 5;
}

enum ProposalDeliveryStatus {
  PROPOSAL_DELIVERY_STATUS_UNSPECIFIED = 0;
  PROPOSAL_DELIVERY_STATUS_PENDING = 1;
  PROPOSAL_DELIVERY_STATUS_DELIVERED = 2;
  PROPOSAL_DELIVERY_STATUS_ACKNOWLEDGED = 3;
  PROPOSAL_DELIVERY_STATUS_FAILED = 4;
}

message Label {
  string key = 1;
  optional string value = 2;
}

message Job {
  string uuid = 1;         // Job UUID
  string original_id = 2; // Job original ID
  repeated Label labels = 3; // Set of labels associated with the job.
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

message Proposal {
  string original_id = 1;                      // Proposal original reference ID
  int64 revision = 2;                         // Proposal revision number
  ProposalStatus status = 3;                  // Proposal status
  ProposalDeliveryStatus delivery_status = 4; // Delivery status
  string original_job_id = 5;                 // Job reference ID
  string spec = 6;                            // Job spec
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

// Request message for transferring a complete job with all proposals
message TransferedJobRequest {
  // Job details to be transferred
  Job job = 1;

  // All job proposals
  repeated Proposal proposals = 2;
}

// Response message for the transfer operation
message TransferedJobResponse {}
